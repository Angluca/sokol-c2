module example;
import stdio local;
import sokol_app as sapp;
import sokol_gfx as sg;
import sokol_glue as sglue;
import sokol_log as slog;

// application state
type State struct {
    sg.Pipeline pip;
    sg.Bindings bind;
    sg.PassAction pass_action;
} State state;

fn void init() {
    sg.Desc desc = {
        .environment = sglue.environment(),
        //.logger = {.func = slog.func}
    } sg.setup(&desc);

    // a vertex buffer
    f32[] vertices = {
        // postions         // colors
       -0.5, 0.5, 0.5,      1.0, 0.0, 0.0, 1.0,
        0.5, 0.5, 0.5,      0.0, 1.0, 0.0, 1.0,
        0.5,-0.5, 0.5,      0.0, 0.0, 1.0, 1.0,
       -0.5,-0.5, 0.5,      0.0, 1.0, 0.0, 1.0,
    } sg.BufferDesc vbd = {
        .data = {.ptr = &vertices, .size = sizeof(vertices)},
        .label = "quad-vertices"
    } state.bind.vertex_buffers[0] = sg.makeBuffer(&vbd);

    // an index buffer with 2 triangles
    u16[] indices = {0, 1, 2,  0, 2, 3}
    sg.BufferDesc ibd = {}
    ibd.usage.index_buffer = true;
    ibd.data = {indices, sizeof(indices)}
    ibd.label = "quad-indices";
    state.bind.index_buffer = sg.makeBuffer(&ibd);

    // a shader (use separate shader sources here
    sg.ShaderDesc sd = quadShaderDesc(sg.queryBackend());
    sg.Shader shd = sg.makeShader(&sd);

    // a pipeline state object
    sg.PipelineDesc pd = {
        .shader = shd,
        .index_type = UINT16,
        .layout = {
            .attrs = {
                [ATTR_QUAD_POSITION] = { .format = sg.VertexFormat.FLOAT3 },
                [ATTR_QUAD_COLOR0] = { .format = FLOAT4 },
            }
        },
        .label = "quad-pipeline",
    }
    state.pip = sg.makePipeline(&pd);

    // a pass action to clear framebuffer to black
    state.pass_action.colors[0] = {
        .load_action = CLEAR,
        .clear_value = {0.0, 0.0, 1.0, 1.0}
    }
}

fn void frame() {
    sg.Pass pass = {.action = state.pass_action, .swapchain = sglue.swapchain()}
    sg.beginPass(&pass);
    sg.applyPipeline(state.pip);
    sg.applyBindings(&state.bind);
    sg.draw(0, 6, 1);
    sg.endPass();
    sg.commit();
}

fn void cleanup() {
    sg.shutdown();
}

public fn i32 main(i32 argc, char** argv) {
    sapp.Desc desc = {
        .init_cb = init,
        .frame_cb = frame,
        .cleanup_cb = cleanup,
        .width = 640,
        .height = 480,
        .window_title = "quad",
        .icon = {.sokol_default = true},
        //.logger = {.func = slog.func},
    }
    sapp.run(&desc);
    return 0;
}

