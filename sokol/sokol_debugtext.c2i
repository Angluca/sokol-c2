// machine generated, do not edit
module sokol_debugtext;
import c2 local;

fn void setup(Desc* desc) @(cname="sdtx_setup");
fn void shutdown() @(cname="sdtx_shutdown");
fn FontDesc fontKc853() @(cname="sdtx_font_kc853");
fn FontDesc fontKc854() @(cname="sdtx_font_kc854");
fn FontDesc fontZ1013() @(cname="sdtx_font_z1013");
fn FontDesc fontCpc() @(cname="sdtx_font_cpc");
fn FontDesc fontC64() @(cname="sdtx_font_c64");
fn FontDesc fontOric() @(cname="sdtx_font_oric");
fn Context makeContext(ContextDesc* desc) @(cname="sdtx_make_context");
fn void destroyContext(Context ctx) @(cname="sdtx_destroy_context");
fn void setContext(Context ctx) @(cname="sdtx_set_context");
fn Context getContext() @(cname="sdtx_get_context");
fn Context defaultContext() @(cname="sdtx_default_context");
fn void draw() @(cname="sdtx_draw");
fn void contextDraw(Context ctx) @(cname="sdtx_context_draw");
fn void drawLayer(c_int layer_id) @(cname="sdtx_draw_layer");
fn void contextDrawLayer(Context ctx, c_int layer_id) @(cname="sdtx_context_draw_layer");
fn void layer(c_int layer_id) @(cname="sdtx_layer");
fn void font(c_int font_index) @(cname="sdtx_font");
fn void canvas(c_float w, c_float h) @(cname="sdtx_canvas");
fn void origin(c_float x, c_float y) @(cname="sdtx_origin");
fn void home() @(cname="sdtx_home");
fn void pos(c_float x, c_float y) @(cname="sdtx_pos");
fn void posX(c_float x) @(cname="sdtx_pos_x");
fn void posY(c_float y) @(cname="sdtx_pos_y");
fn void move(c_float dx, c_float dy) @(cname="sdtx_move");
fn void moveX(c_float dx) @(cname="sdtx_move_x");
fn void moveY(c_float dy) @(cname="sdtx_move_y");
fn void crlf() @(cname="sdtx_crlf");
fn void color3b(u8 r, u8 g, u8 b) @(cname="sdtx_color3b");
fn void color3f(c_float r, c_float g, c_float b) @(cname="sdtx_color3f");
fn void color4b(u8 r, u8 g, u8 b, u8 a) @(cname="sdtx_color4b");
fn void color4f(c_float r, c_float g, c_float b, c_float a) @(cname="sdtx_color4f");
fn void color1i(u32 rgba) @(cname="sdtx_color1i");
fn void putc(char c) @(cname="sdtx_putc");
fn void puts(const char* str) @(cname="sdtx_puts");
fn void putr(const char* str, c_int len) @(cname="sdtx_putr");
fn Range getClearedFmtBuffer() @(cname="sdtx_get_cleared_fmt_buffer");

type LogItem enum i32 @(cname="sdtx_log_item_t") {
    OK = 0,
    MALLOC_FAILED = 1,
    ADD_COMMIT_LISTENER_FAILED = 2,
    COMMAND_BUFFER_FULL = 3,
    CONTEXT_POOL_EXHAUSTED = 4,
    CANNOT_DESTROY_DEFAULT_CONTEXT = 5,
}

type Logger struct @(cname="sdtx_logger_t") {
    LogCb func;
    void* user_data;
}

type Context struct @(cname="sdtx_context") {
    u32 id;
}

type Range struct @(cname="sdtx_range") {
    void* ptr;
    usize size;
}

type FontDesc struct @(cname="sdtx_font_desc_t") {
    Range data;
    u8 first_char;
    u8 last_char;
}

type ContextDesc struct @(cname="sdtx_context_desc_t") {
    c_int max_commands;
    c_int char_buf_size;
    c_float canvas_width;
    c_float canvas_height;
    c_int tab_width;
    PixelFormat color_format;
    PixelFormat depth_format;
    c_int sample_count;
}

type Allocator struct @(cname="sdtx_allocator_t") {
    AllocCb alloc_fn;
    FreeCb free_fn;
    void* user_data;
}

type Desc struct @(cname="sdtx_desc_t") {
    c_int context_pool_size;
    c_int printf_buf_size;
    FontDesc[8] fonts;
    ContextDesc context;
    Allocator allocator;
    Logger logger;
}

type LogCb fn void(const char*, u32, u32, const char*, u32, const char*, void*);
type AllocCb fn void*(usize, void*);
type FreeCb fn void(void*, void*);

