// machine generated, do not edit
module sokol_gfx;

fn void setup(Desc* desc) @(cname="sg_setup");
fn void shutdown() @(cname="sg_shutdown");
fn bool isvalid() @(cname="sg_isvalid");
fn void resetStateCache() @(cname="sg_reset_state_cache");
fn void pushDebugGroup(const char* name) @(cname="sg_push_debug_group");
fn void popDebugGroup() @(cname="sg_pop_debug_group");
fn bool addCommitListener(CommitListener listener) @(cname="sg_add_commit_listener");
fn bool removeCommitListener(CommitListener listener) @(cname="sg_remove_commit_listener");
fn Buffer makeBuffer(BufferDesc* desc) @(cname="sg_make_buffer");
fn Image makeImage(ImageDesc* desc) @(cname="sg_make_image");
fn Sampler makeSampler(SamplerDesc* desc) @(cname="sg_make_sampler");
fn Shader makeShader(ShaderDesc* desc) @(cname="sg_make_shader");
fn Pipeline makePipeline(PipelineDesc* desc) @(cname="sg_make_pipeline");
fn View makeView(ViewDesc* desc) @(cname="sg_make_view");
fn void destroyBuffer(Buffer buf) @(cname="sg_destroy_buffer");
fn void destroyImage(Image img) @(cname="sg_destroy_image");
fn void destroySampler(Sampler smp) @(cname="sg_destroy_sampler");
fn void destroyShader(Shader shd) @(cname="sg_destroy_shader");
fn void destroyPipeline(Pipeline pip) @(cname="sg_destroy_pipeline");
fn void destroyView(View view) @(cname="sg_destroy_view");
fn void updateBuffer(Buffer buf, Range* data) @(cname="sg_update_buffer");
fn void updateImage(Image img, ImageData* data) @(cname="sg_update_image");
fn i32 appendBuffer(Buffer buf, Range* data) @(cname="sg_append_buffer");
fn bool queryBufferOverflow(Buffer buf) @(cname="sg_query_buffer_overflow");
fn bool queryBufferWillOverflow(Buffer buf, usize size) @(cname="sg_query_buffer_will_overflow");
fn void beginPass(Pass* pass) @(cname="sg_begin_pass");
fn void applyViewport(i32 x, i32 y, i32 width, i32 height, bool origin_top_left) @(cname="sg_apply_viewport");
fn void applyViewportf(f32 x, f32 y, f32 width, f32 height, bool origin_top_left) @(cname="sg_apply_viewportf");
fn void applyScissorRect(i32 x, i32 y, i32 width, i32 height, bool origin_top_left) @(cname="sg_apply_scissor_rect");
fn void applyScissorRectf(f32 x, f32 y, f32 width, f32 height, bool origin_top_left) @(cname="sg_apply_scissor_rectf");
fn void applyPipeline(Pipeline pip) @(cname="sg_apply_pipeline");
fn void applyBindings(Bindings* bindings) @(cname="sg_apply_bindings");
fn void applyUniforms(i32 ub_slot, Range* data) @(cname="sg_apply_uniforms");
fn void draw(i32 base_element, i32 num_elements, i32 num_instances) @(cname="sg_draw");
fn void drawEx(i32 base_element, i32 num_elements, i32 num_instances, i32 base_vertex, i32 base_instance) @(cname="sg_draw_ex");
fn void dispatch(i32 num_groups_x, i32 num_groups_y, i32 num_groups_z) @(cname="sg_dispatch");
fn void endPass() @(cname="sg_end_pass");
fn void commit() @(cname="sg_commit");
fn Desc queryDesc() @(cname="sg_query_desc");
fn Backend queryBackend() @(cname="sg_query_backend");
fn Features queryFeatures() @(cname="sg_query_features");
fn Limits queryLimits() @(cname="sg_query_limits");
fn PixelformatInfo queryPixelformat(PixelFormat fmt) @(cname="sg_query_pixelformat");
fn i32 queryRowPitch(PixelFormat fmt, i32 width, i32 row_align_bytes) @(cname="sg_query_row_pitch");
fn i32 querySurfacePitch(PixelFormat fmt, i32 width, i32 height, i32 row_align_bytes) @(cname="sg_query_surface_pitch");
fn ResourceState queryBufferState(Buffer buf) @(cname="sg_query_buffer_state");
fn ResourceState queryImageState(Image img) @(cname="sg_query_image_state");
fn ResourceState querySamplerState(Sampler smp) @(cname="sg_query_sampler_state");
fn ResourceState queryShaderState(Shader shd) @(cname="sg_query_shader_state");
fn ResourceState queryPipelineState(Pipeline pip) @(cname="sg_query_pipeline_state");
fn ResourceState queryViewState(View view) @(cname="sg_query_view_state");
fn BufferInfo queryBufferInfo(Buffer buf) @(cname="sg_query_buffer_info");
fn ImageInfo queryImageInfo(Image img) @(cname="sg_query_image_info");
fn SamplerInfo querySamplerInfo(Sampler smp) @(cname="sg_query_sampler_info");
fn ShaderInfo queryShaderInfo(Shader shd) @(cname="sg_query_shader_info");
fn PipelineInfo queryPipelineInfo(Pipeline pip) @(cname="sg_query_pipeline_info");
fn ViewInfo queryViewInfo(View view) @(cname="sg_query_view_info");
fn BufferDesc queryBufferDesc(Buffer buf) @(cname="sg_query_buffer_desc");
fn ImageDesc queryImageDesc(Image img) @(cname="sg_query_image_desc");
fn SamplerDesc querySamplerDesc(Sampler smp) @(cname="sg_query_sampler_desc");
fn ShaderDesc queryShaderDesc(Shader shd) @(cname="sg_query_shader_desc");
fn PipelineDesc queryPipelineDesc(Pipeline pip) @(cname="sg_query_pipeline_desc");
fn ViewDesc queryViewDesc(View view) @(cname="sg_query_view_desc");
fn BufferDesc queryBufferDefaults(BufferDesc* desc) @(cname="sg_query_buffer_defaults");
fn ImageDesc queryImageDefaults(ImageDesc* desc) @(cname="sg_query_image_defaults");
fn SamplerDesc querySamplerDefaults(SamplerDesc* desc) @(cname="sg_query_sampler_defaults");
fn ShaderDesc queryShaderDefaults(ShaderDesc* desc) @(cname="sg_query_shader_defaults");
fn PipelineDesc queryPipelineDefaults(PipelineDesc* desc) @(cname="sg_query_pipeline_defaults");
fn ViewDesc queryViewDefaults(ViewDesc* desc) @(cname="sg_query_view_defaults");
fn usize queryBufferSize(Buffer buf) @(cname="sg_query_buffer_size");
fn BufferUsage queryBufferUsage(Buffer buf) @(cname="sg_query_buffer_usage");
fn ImageType queryImageType(Image img) @(cname="sg_query_image_type");
fn i32 queryImageWidth(Image img) @(cname="sg_query_image_width");
fn i32 queryImageHeight(Image img) @(cname="sg_query_image_height");
fn i32 queryImageNumSlices(Image img) @(cname="sg_query_image_num_slices");
fn i32 queryImageNumMipmaps(Image img) @(cname="sg_query_image_num_mipmaps");
fn PixelFormat queryImagePixelformat(Image img) @(cname="sg_query_image_pixelformat");
fn ImageUsage queryImageUsage(Image img) @(cname="sg_query_image_usage");
fn i32 queryImageSampleCount(Image img) @(cname="sg_query_image_sample_count");
fn ViewType queryViewType(View view) @(cname="sg_query_view_type");
fn Image queryViewImage(View view) @(cname="sg_query_view_image");
fn Buffer queryViewBuffer(View view) @(cname="sg_query_view_buffer");
fn Buffer allocBuffer() @(cname="sg_alloc_buffer");
fn Image allocImage() @(cname="sg_alloc_image");
fn Sampler allocSampler() @(cname="sg_alloc_sampler");
fn Shader allocShader() @(cname="sg_alloc_shader");
fn Pipeline allocPipeline() @(cname="sg_alloc_pipeline");
fn View allocView() @(cname="sg_alloc_view");
fn void deallocBuffer(Buffer buf) @(cname="sg_dealloc_buffer");
fn void deallocImage(Image img) @(cname="sg_dealloc_image");
fn void deallocSampler(Sampler smp) @(cname="sg_dealloc_sampler");
fn void deallocShader(Shader shd) @(cname="sg_dealloc_shader");
fn void deallocPipeline(Pipeline pip) @(cname="sg_dealloc_pipeline");
fn void deallocView(View view) @(cname="sg_dealloc_view");
fn void initBuffer(Buffer buf, BufferDesc* desc) @(cname="sg_init_buffer");
fn void initImage(Image img, ImageDesc* desc) @(cname="sg_init_image");
fn void initSampler(Sampler smg, SamplerDesc* desc) @(cname="sg_init_sampler");
fn void initShader(Shader shd, ShaderDesc* desc) @(cname="sg_init_shader");
fn void initPipeline(Pipeline pip, PipelineDesc* desc) @(cname="sg_init_pipeline");
fn void initView(View view, ViewDesc* desc) @(cname="sg_init_view");
fn void uninitBuffer(Buffer buf) @(cname="sg_uninit_buffer");
fn void uninitImage(Image img) @(cname="sg_uninit_image");
fn void uninitSampler(Sampler smp) @(cname="sg_uninit_sampler");
fn void uninitShader(Shader shd) @(cname="sg_uninit_shader");
fn void uninitPipeline(Pipeline pip) @(cname="sg_uninit_pipeline");
fn void uninitView(View view) @(cname="sg_uninit_view");
fn void failBuffer(Buffer buf) @(cname="sg_fail_buffer");
fn void failImage(Image img) @(cname="sg_fail_image");
fn void failSampler(Sampler smp) @(cname="sg_fail_sampler");
fn void failShader(Shader shd) @(cname="sg_fail_shader");
fn void failPipeline(Pipeline pip) @(cname="sg_fail_pipeline");
fn void failView(View view) @(cname="sg_fail_view");
fn void enableFrameStats() @(cname="sg_enable_frame_stats");
fn void disableFrameStats() @(cname="sg_disable_frame_stats");
fn bool frameStatsEnabled() @(cname="sg_frame_stats_enabled");
fn FrameStats queryFrameStats() @(cname="sg_query_frame_stats");
fn void* d3d11Device() @(cname="sg_d3d11_device");
fn void* d3d11DeviceContext() @(cname="sg_d3d11_device_context");
fn D3d11BufferInfo d3d11QueryBufferInfo(Buffer buf) @(cname="sg_d3d11_query_buffer_info");
fn D3d11ImageInfo d3d11QueryImageInfo(Image img) @(cname="sg_d3d11_query_image_info");
fn D3d11SamplerInfo d3d11QuerySamplerInfo(Sampler smp) @(cname="sg_d3d11_query_sampler_info");
fn D3d11ShaderInfo d3d11QueryShaderInfo(Shader shd) @(cname="sg_d3d11_query_shader_info");
fn D3d11PipelineInfo d3d11QueryPipelineInfo(Pipeline pip) @(cname="sg_d3d11_query_pipeline_info");
fn D3d11ViewInfo d3d11QueryViewInfo(View view) @(cname="sg_d3d11_query_view_info");
fn void* mtlDevice() @(cname="sg_mtl_device");
fn void* mtlRenderCommandEncoder() @(cname="sg_mtl_render_command_encoder");
fn void* mtlComputeCommandEncoder() @(cname="sg_mtl_compute_command_encoder");
fn MtlBufferInfo mtlQueryBufferInfo(Buffer buf) @(cname="sg_mtl_query_buffer_info");
fn MtlImageInfo mtlQueryImageInfo(Image img) @(cname="sg_mtl_query_image_info");
fn MtlSamplerInfo mtlQuerySamplerInfo(Sampler smp) @(cname="sg_mtl_query_sampler_info");
fn MtlShaderInfo mtlQueryShaderInfo(Shader shd) @(cname="sg_mtl_query_shader_info");
fn MtlPipelineInfo mtlQueryPipelineInfo(Pipeline pip) @(cname="sg_mtl_query_pipeline_info");
fn void* wgpuDevice() @(cname="sg_wgpu_device");
fn void* wgpuQueue() @(cname="sg_wgpu_queue");
fn void* wgpuCommandEncoder() @(cname="sg_wgpu_command_encoder");
fn void* wgpuRenderPassEncoder() @(cname="sg_wgpu_render_pass_encoder");
fn void* wgpuComputePassEncoder() @(cname="sg_wgpu_compute_pass_encoder");
fn WgpuBufferInfo wgpuQueryBufferInfo(Buffer buf) @(cname="sg_wgpu_query_buffer_info");
fn WgpuImageInfo wgpuQueryImageInfo(Image img) @(cname="sg_wgpu_query_image_info");
fn WgpuSamplerInfo wgpuQuerySamplerInfo(Sampler smp) @(cname="sg_wgpu_query_sampler_info");
fn WgpuShaderInfo wgpuQueryShaderInfo(Shader shd) @(cname="sg_wgpu_query_shader_info");
fn WgpuPipelineInfo wgpuQueryPipelineInfo(Pipeline pip) @(cname="sg_wgpu_query_pipeline_info");
fn WgpuViewInfo wgpuQueryViewInfo(View view) @(cname="sg_wgpu_query_view_info");
fn GlBufferInfo glQueryBufferInfo(Buffer buf) @(cname="sg_gl_query_buffer_info");
fn GlImageInfo glQueryImageInfo(Image img) @(cname="sg_gl_query_image_info");
fn GlSamplerInfo glQuerySamplerInfo(Sampler smp) @(cname="sg_gl_query_sampler_info");
fn GlShaderInfo glQueryShaderInfo(Shader shd) @(cname="sg_gl_query_shader_info");
fn GlViewInfo glQueryViewInfo(View view) @(cname="sg_gl_query_view_info");

type Buffer struct @(cname="sg_buffer") {
    u32 id;
}

type Image struct @(cname="sg_image") {
    u32 id;
}

type Sampler struct @(cname="sg_sampler") {
    u32 id;
}

type Shader struct @(cname="sg_shader") {
    u32 id;
}

type Pipeline struct @(cname="sg_pipeline") {
    u32 id;
}

type View struct @(cname="sg_view") {
    u32 id;
}

type Range struct @(cname="sg_range") {
    void* ptr;
    usize size;
}

const u32 INVALID_ID = 0;
const usize NUM_INFLIGHT_FRAMES = 2;
const usize MAX_COLOR_ATTACHMENTS = 8;
const usize MAX_UNIFORMBLOCK_MEMBERS = 16;
const usize MAX_VERTEX_ATTRIBUTES = 16;
const usize MAX_MIPMAPS = 16;
const usize MAX_VERTEXBUFFER_BINDSLOTS = 8;
const usize MAX_UNIFORMBLOCK_BINDSLOTS = 8;
const usize MAX_VIEW_BINDSLOTS = 32;
const usize MAX_SAMPLER_BINDSLOTS = 12;
const usize MAX_TEXTURE_SAMPLER_PAIRS = 32;
const usize MAX_PORTABLE_COLOR_ATTACHMENTS = 4;
const usize MAX_PORTABLE_TEXTURE_BINDINGS_PER_STAGE = 16;
const usize MAX_PORTABLE_STORAGEBUFFER_BINDINGS_PER_STAGE = 8;
const usize MAX_PORTABLE_STORAGEIMAGE_BINDINGS_PER_STAGE = 4;

type Color struct @(cname="sg_color") {
    f32 r;
    f32 g;
    f32 b;
    f32 a;
}

type Backend enum i32 @(cname="sg_backend") {
    GLCORE = 0,
    GLES3 = 1,
    D3D11 = 2,
    METAL_IOS = 3,
    METAL_MACOS = 4,
    METAL_SIMULATOR = 5,
    WGPU = 6,
    DUMMY = 7,
}

type PixelFormat enum u32 @(cname="sg_pixel_format") {
    DEFAULT = 0,
    NONE = 1,
    R8 = 2,
    R8SN = 3,
    R8UI = 4,
    R8SI = 5,
    R16 = 6,
    R16SN = 7,
    R16UI = 8,
    R16SI = 9,
    R16F = 10,
    RG8 = 11,
    RG8SN = 12,
    RG8UI = 13,
    RG8SI = 14,
    R32UI = 15,
    R32SI = 16,
    R32F = 17,
    RG16 = 18,
    RG16SN = 19,
    RG16UI = 20,
    RG16SI = 21,
    RG16F = 22,
    RGBA8 = 23,
    SRGB8A8 = 24,
    RGBA8SN = 25,
    RGBA8UI = 26,
    RGBA8SI = 27,
    BGRA8 = 28,
    RGB10A2 = 29,
    RG11B10F = 30,
    RGB9E5 = 31,
    RG32UI = 32,
    RG32SI = 33,
    RG32F = 34,
    RGBA16 = 35,
    RGBA16SN = 36,
    RGBA16UI = 37,
    RGBA16SI = 38,
    RGBA16F = 39,
    RGBA32UI = 40,
    RGBA32SI = 41,
    RGBA32F = 42,
    DEPTH = 43,
    DEPTH_STENCIL = 44,
    BC1_RGBA = 45,
    BC2_RGBA = 46,
    BC3_RGBA = 47,
    BC3_SRGBA = 48,
    BC4_R = 49,
    BC4_RSN = 50,
    BC5_RG = 51,
    BC5_RGSN = 52,
    BC6H_RGBF = 53,
    BC6H_RGBUF = 54,
    BC7_RGBA = 55,
    BC7_SRGBA = 56,
    ETC2_RGB8 = 57,
    ETC2_SRGB8 = 58,
    ETC2_RGB8A1 = 59,
    ETC2_RGBA8 = 60,
    ETC2_SRGB8A8 = 61,
    EAC_R11 = 62,
    EAC_R11SN = 63,
    EAC_RG11 = 64,
    EAC_RG11SN = 65,
    ASTC_4X4_RGBA = 66,
    ASTC_4X4_SRGBA = 67,
    NUM = 68,
}

type PixelformatInfo struct @(cname="sg_pixelformat_info") {
    bool sample;
    bool filter;
    bool render;
    bool blend;
    bool msaa;
    bool depth;
    bool compressed;
    bool read;
    bool write;
    i32 bytes_per_pixel;
}

type Features struct @(cname="sg_features") {
    bool origin_top_left;
    bool image_clamp_to_border;
    bool mrt_independent_blend_state;
    bool mrt_independent_write_mask;
    bool compute;
    bool msaa_texture_bindings;
    bool separate_buffer_types;
    bool draw_base_vertex;
    bool draw_base_instance;
    bool gl_texture_views;
}

type Limits struct @(cname="sg_limits") {
    i32 max_image_size_2d;
    i32 max_image_size_cube;
    i32 max_image_size_3d;
    i32 max_image_size_array;
    i32 max_image_array_layers;
    i32 max_vertex_attrs;
    i32 max_color_attachments;
    i32 max_texture_bindings_per_stage;
    i32 max_storage_buffer_bindings_per_stage;
    i32 max_storage_image_bindings_per_stage;
    i32 gl_max_vertex_uniform_components;
    i32 gl_max_combined_texture_image_units;
    i32 d3d11_max_unordered_access_views;
}

type ResourceState enum u32 @(cname="sg_resource_state") {
    INITIAL = 0,
    ALLOC = 1,
    VALID = 2,
    FAILED = 3,
    INVALID = 4,
}

type IndexType enum u32 @(cname="sg_index_type") {
    DEFAULT = 0,
    NONE = 1,
    UINT16 = 2,
    UINT32 = 3,
    NUM = 4,
}

type ImageType enum u32 @(cname="sg_image_type") {
    DEFAULT = 0,
    TYPE_2D = 1,
    CUBE = 2,
    TYPE_3D = 3,
    ARRAY = 4,
    NUM = 5,
}

type ImageSampleType enum u32 @(cname="sg_image_sample_type") {
    DEFAULT = 0,
    FLOAT = 1,
    DEPTH = 2,
    SINT = 3,
    UINT = 4,
    UNFILTERABLE_FLOAT = 5,
    NUM = 6,
}

type SamplerType enum u32 @(cname="sg_sampler_type") {
    DEFAULT = 0,
    FILTERING = 1,
    NONFILTERING = 2,
    COMPARISON = 3,
    NUM = 4,
}

type PrimitiveType enum u32 @(cname="sg_primitive_type") {
    DEFAULT = 0,
    POINTS = 1,
    LINES = 2,
    LINE_STRIP = 3,
    TRIANGLES = 4,
    TRIANGLE_STRIP = 5,
    NUM = 6,
}

type Filter enum u32 @(cname="sg_filter") {
    DEFAULT = 0,
    NEAREST = 1,
    LINEAR = 2,
    NUM = 3,
}

type Wrap enum u32 @(cname="sg_wrap") {
    DEFAULT = 0,
    REPEAT = 1,
    CLAMP_TO_EDGE = 2,
    CLAMP_TO_BORDER = 3,
    MIRRORED_REPEAT = 4,
    NUM = 5,
}

type BorderColor enum u32 @(cname="sg_border_color") {
    DEFAULT = 0,
    TRANSPARENT_BLACK = 1,
    OPAQUE_BLACK = 2,
    OPAQUE_WHITE = 3,
    NUM = 4,
}

type VertexFormat enum u32 @(cname="sg_vertex_format") {
    INVALID = 0,
    FLOAT = 1,
    FLOAT2 = 2,
    FLOAT3 = 3,
    FLOAT4 = 4,
    INT = 5,
    INT2 = 6,
    INT3 = 7,
    INT4 = 8,
    UINT = 9,
    UINT2 = 10,
    UINT3 = 11,
    UINT4 = 12,
    BYTE4 = 13,
    BYTE4N = 14,
    UBYTE4 = 15,
    UBYTE4N = 16,
    SHORT2 = 17,
    SHORT2N = 18,
    USHORT2 = 19,
    USHORT2N = 20,
    SHORT4 = 21,
    SHORT4N = 22,
    USHORT4 = 23,
    USHORT4N = 24,
    UINT10_N2 = 25,
    HALF2 = 26,
    HALF4 = 27,
    NUM = 28,
}

type VertexStep enum u32 @(cname="sg_vertex_step") {
    DEFAULT = 0,
    PER_VERTEX = 1,
    PER_INSTANCE = 2,
    NUM = 3,
}

type UniformType enum u32 @(cname="sg_uniform_type") {
    INVALID = 0,
    FLOAT = 1,
    FLOAT2 = 2,
    FLOAT3 = 3,
    FLOAT4 = 4,
    INT = 5,
    INT2 = 6,
    INT3 = 7,
    INT4 = 8,
    MAT4 = 9,
    NUM = 10,
}

type UniformLayout enum u32 @(cname="sg_uniform_layout") {
    DEFAULT = 0,
    NATIVE = 1,
    STD140 = 2,
    NUM = 3,
}

type CullMode enum u32 @(cname="sg_cull_mode") {
    DEFAULT = 0,
    NONE = 1,
    FRONT = 2,
    BACK = 3,
    NUM = 4,
}

type FaceWinding enum u32 @(cname="sg_face_winding") {
    DEFAULT = 0,
    CCW = 1,
    CW = 2,
    NUM = 3,
}

type CompareFunc enum u32 @(cname="sg_compare_func") {
    DEFAULT = 0,
    NEVER = 1,
    LESS = 2,
    EQUAL = 3,
    LESS_EQUAL = 4,
    GREATER = 5,
    NOT_EQUAL = 6,
    GREATER_EQUAL = 7,
    ALWAYS = 8,
    NUM = 9,
}

type StencilOp enum u32 @(cname="sg_stencil_op") {
    DEFAULT = 0,
    KEEP = 1,
    ZERO = 2,
    REPLACE = 3,
    INCR_CLAMP = 4,
    DECR_CLAMP = 5,
    INVERT = 6,
    INCR_WRAP = 7,
    DECR_WRAP = 8,
    NUM = 9,
}

type BlendFactor enum u32 @(cname="sg_blend_factor") {
    DEFAULT = 0,
    ZERO = 1,
    ONE = 2,
    SRC_COLOR = 3,
    ONE_MINUS_SRC_COLOR = 4,
    SRC_ALPHA = 5,
    ONE_MINUS_SRC_ALPHA = 6,
    DST_COLOR = 7,
    ONE_MINUS_DST_COLOR = 8,
    DST_ALPHA = 9,
    ONE_MINUS_DST_ALPHA = 10,
    SRC_ALPHA_SATURATED = 11,
    BLEND_COLOR = 12,
    ONE_MINUS_BLEND_COLOR = 13,
    BLEND_ALPHA = 14,
    ONE_MINUS_BLEND_ALPHA = 15,
    NUM = 16,
}

type BlendOp enum u32 @(cname="sg_blend_op") {
    DEFAULT = 0,
    ADD = 1,
    SUBTRACT = 2,
    REVERSE_SUBTRACT = 3,
    MIN = 4,
    MAX = 5,
    NUM = 6,
}

type ColorMask enum u32 @(cname="sg_color_mask") {
    DEFAULT = 0,
    R = 1,
    G = 2,
    RG = 3,
    B = 4,
    RB = 5,
    GB = 6,
    RGB = 7,
    A = 8,
    RA = 9,
    GA = 10,
    RGA = 11,
    BA = 12,
    RBA = 13,
    GBA = 14,
    RGBA = 15,
    NONE = 16,
}

type LoadAction enum u32 @(cname="sg_load_action") {
    DEFAULT = 0,
    CLEAR = 1,
    LOAD = 2,
    DONTCARE = 3,
}

type StoreAction enum u32 @(cname="sg_store_action") {
    DEFAULT = 0,
    STORE = 1,
    DONTCARE = 2,
}

type ColorAttachmentAction struct @(cname="sg_color_attachment_action") {
    LoadAction load_action;
    StoreAction store_action;
    Color clear_value;
}

type DepthAttachmentAction struct @(cname="sg_depth_attachment_action") {
    LoadAction load_action;
    StoreAction store_action;
    f32 clear_value;
}

type StencilAttachmentAction struct @(cname="sg_stencil_attachment_action") {
    LoadAction load_action;
    StoreAction store_action;
    u8 clear_value;
}

type PassAction struct @(cname="sg_pass_action") {
    ColorAttachmentAction[8] colors;
    DepthAttachmentAction depth;
    StencilAttachmentAction stencil;
}

type MetalSwapchain struct @(cname="sg_metal_swapchain") {
    void* current_drawable;
    void* depth_stencil_texture;
    void* msaa_color_texture;
}

type D3d11Swapchain struct @(cname="sg_d3d11_swapchain") {
    void* render_view;
    void* resolve_view;
    void* depth_stencil_view;
}

type WgpuSwapchain struct @(cname="sg_wgpu_swapchain") {
    void* render_view;
    void* resolve_view;
    void* depth_stencil_view;
}

type GlSwapchain struct @(cname="sg_gl_swapchain") {
    u32 framebuffer;
}

type Swapchain struct @(cname="sg_swapchain") {
    i32 width;
    i32 height;
    i32 sample_count;
    PixelFormat color_format;
    PixelFormat depth_format;
    MetalSwapchain metal;
    D3d11Swapchain d3d11;
    WgpuSwapchain wgpu;
    GlSwapchain gl;
}

type Attachments struct @(cname="sg_attachments") {
    View[8] colors;
    View[8] resolves;
    View depth_stencil;
}

type Pass struct @(cname="sg_pass") {
    u32 _start_canary;
    bool compute;
    PassAction action;
    Attachments attachments;
    Swapchain swapchain;
    const char* label;
    u32 _end_canary;
}

type Bindings struct @(cname="sg_bindings") {
    u32 _start_canary;
    Buffer[8] vertex_buffers;
    i32[8] vertex_buffer_offsets;
    Buffer index_buffer;
    i32 index_buffer_offset;
    View[32] views;
    Sampler[12] samplers;
    u32 _end_canary;
}

type BufferUsage struct @(cname="sg_buffer_usage") {
    bool vertex_buffer;
    bool index_buffer;
    bool storage_buffer;
    bool immutable;
    bool dynamic_update;
    bool stream_update;
}

type BufferDesc struct @(cname="sg_buffer_desc") {
    u32 _start_canary;
    usize size;
    BufferUsage usage;
    Range data;
    const char* label;
    u32[2] gl_buffers;
    void*[2] mtl_buffers;
    void* d3d11_buffer;
    void* wgpu_buffer;
    u32 _end_canary;
}

type ImageUsage struct @(cname="sg_image_usage") {
    bool storage_image;
    bool color_attachment;
    bool resolve_attachment;
    bool depth_stencil_attachment;
    bool immutable;
    bool dynamic_update;
    bool stream_update;
}

type ViewType enum u32 @(cname="sg_view_type") {
    INVALID = 0,
    STORAGEBUFFER = 1,
    STORAGEIMAGE = 2,
    TEXTURE = 3,
    COLORATTACHMENT = 4,
    RESOLVEATTACHMENT = 5,
    DEPTHSTENCILATTACHMENT = 6,
}

type ImageData struct @(cname="sg_image_data") {
    Range[16] mip_levels;
}

type ImageDesc struct @(cname="sg_image_desc") {
    u32 _start_canary;
    ImageType type_;
    ImageUsage usage;
    i32 width;
    i32 height;
    i32 num_slices;
    i32 num_mipmaps;
    PixelFormat pixel_format;
    i32 sample_count;
    ImageData data;
    const char* label;
    u32[2] gl_textures;
    u32 gl_texture_target;
    void*[2] mtl_textures;
    void* d3d11_texture;
    void* wgpu_texture;
    u32 _end_canary;
}

type SamplerDesc struct @(cname="sg_sampler_desc") {
    u32 _start_canary;
    Filter min_filter;
    Filter mag_filter;
    Filter mipmap_filter;
    Wrap wrap_u;
    Wrap wrap_v;
    Wrap wrap_w;
    f32 min_lod;
    f32 max_lod;
    BorderColor border_color;
    CompareFunc compare;
    u32 max_anisotropy;
    const char* label;
    u32 gl_sampler;
    void* mtl_sampler;
    void* d3d11_sampler;
    void* wgpu_sampler;
    u32 _end_canary;
}

type ShaderStage enum u32 @(cname="sg_shader_stage") {
    NONE = 0,
    VERTEX = 1,
    FRAGMENT = 2,
    COMPUTE = 3,
}

type ShaderFunction struct @(cname="sg_shader_function") {
    const char* source;
    Range bytecode;
    const char* entry;
    const char* d3d11_target;
    const char* d3d11_filepath;
}

type ShaderAttrBaseType enum u32 @(cname="sg_shader_attr_base_type") {
    UNDEFINED = 0,
    FLOAT = 1,
    SINT = 2,
    UINT = 3,
}

type ShaderVertexAttr struct @(cname="sg_shader_vertex_attr") {
    ShaderAttrBaseType base_type;
    const char* glsl_name;
    const char* hlsl_sem_name;
    u8 hlsl_sem_index;
}

type GlslShaderUniform struct @(cname="sg_glsl_shader_uniform") {
    UniformType type_;
    u16 array_count;
    const char* glsl_name;
}

type ShaderUniformBlock struct @(cname="sg_shader_uniform_block") {
    ShaderStage stage;
    u32 size;
    u8 hlsl_register_b_n;
    u8 msl_buffer_n;
    u8 wgsl_group0_binding_n;
    UniformLayout layout;
    GlslShaderUniform[16] glsl_uniforms;
}

type ShaderTextureView struct @(cname="sg_shader_texture_view") {
    ShaderStage stage;
    ImageType image_type;
    ImageSampleType sample_type;
    bool multisampled;
    u8 hlsl_register_t_n;
    u8 msl_texture_n;
    u8 wgsl_group1_binding_n;
}

type ShaderStorageBufferView struct @(cname="sg_shader_storage_buffer_view") {
    ShaderStage stage;
    bool readonly;
    u8 hlsl_register_t_n;
    u8 hlsl_register_u_n;
    u8 msl_buffer_n;
    u8 wgsl_group1_binding_n;
    u8 glsl_binding_n;
}

type ShaderStorageImageView struct @(cname="sg_shader_storage_image_view") {
    ShaderStage stage;
    ImageType image_type;
    PixelFormat access_format;
    bool writeonly;
    u8 hlsl_register_u_n;
    u8 msl_texture_n;
    u8 wgsl_group1_binding_n;
    u8 glsl_binding_n;
}

type ShaderView struct @(cname="sg_shader_view") {
    ShaderTextureView texture;
    ShaderStorageBufferView storage_buffer;
    ShaderStorageImageView storage_image;
}

type ShaderSampler struct @(cname="sg_shader_sampler") {
    ShaderStage stage;
    SamplerType sampler_type;
    u8 hlsl_register_s_n;
    u8 msl_sampler_n;
    u8 wgsl_group1_binding_n;
}

type ShaderTextureSamplerPair struct @(cname="sg_shader_texture_sampler_pair") {
    ShaderStage stage;
    u8 view_slot;
    u8 sampler_slot;
    const char* glsl_name;
}

type MtlShaderThreadsPerThreadgroup struct @(cname="sg_mtl_shader_threads_per_threadgroup") {
    i32 x;
    i32 y;
    i32 z;
}

type ShaderDesc struct @(cname="sg_shader_desc") {
    u32 _start_canary;
    ShaderFunction vertex_func;
    ShaderFunction fragment_func;
    ShaderFunction compute_func;
    ShaderVertexAttr[16] attrs;
    ShaderUniformBlock[8] uniform_blocks;
    ShaderView[32] views;
    ShaderSampler[12] samplers;
    ShaderTextureSamplerPair[32] texture_sampler_pairs;
    MtlShaderThreadsPerThreadgroup mtl_threads_per_threadgroup;
    const char* label;
    u32 _end_canary;
}

type VertexBufferLayoutState struct @(cname="sg_vertex_buffer_layout_state") {
    i32 stride;
    VertexStep step_func;
    i32 step_rate;
}

type VertexAttrState struct @(cname="sg_vertex_attr_state") {
    i32 buffer_index;
    i32 offset;
    VertexFormat format;
}

type VertexLayoutState struct @(cname="sg_vertex_layout_state") {
    VertexBufferLayoutState[8] buffers;
    VertexAttrState[16] attrs;
}

type StencilFaceState struct @(cname="sg_stencil_face_state") {
    CompareFunc compare;
    StencilOp fail_op;
    StencilOp depth_fail_op;
    StencilOp pass_op;
}

type StencilState struct @(cname="sg_stencil_state") {
    bool enabled;
    StencilFaceState front;
    StencilFaceState back;
    u8 read_mask;
    u8 write_mask;
    u8 ref;
}

type DepthState struct @(cname="sg_depth_state") {
    PixelFormat pixel_format;
    CompareFunc compare;
    bool write_enabled;
    f32 bias;
    f32 bias_slope_scale;
    f32 bias_clamp;
}

type BlendState struct @(cname="sg_blend_state") {
    bool enabled;
    BlendFactor src_factor_rgb;
    BlendFactor dst_factor_rgb;
    BlendOp op_rgb;
    BlendFactor src_factor_alpha;
    BlendFactor dst_factor_alpha;
    BlendOp op_alpha;
}

type ColorTargetState struct @(cname="sg_color_target_state") {
    PixelFormat pixel_format;
    ColorMask write_mask;
    BlendState blend;
}

type PipelineDesc struct @(cname="sg_pipeline_desc") {
    u32 _start_canary;
    bool compute;
    Shader shader;
    VertexLayoutState layout;
    DepthState depth;
    StencilState stencil;
    i32 color_count;
    ColorTargetState[8] colors;
    PrimitiveType primitive_type;
    IndexType index_type;
    CullMode cull_mode;
    FaceWinding face_winding;
    i32 sample_count;
    Color blend_color;
    bool alpha_to_coverage_enabled;
    const char* label;
    u32 _end_canary;
}

type BufferViewDesc struct @(cname="sg_buffer_view_desc") {
    Buffer buffer;
    i32 offset;
}

type ImageViewDesc struct @(cname="sg_image_view_desc") {
    Image image;
    i32 mip_level;
    i32 slice;
}

type TextureViewRange struct @(cname="sg_texture_view_range") {
    i32 base;
    i32 count;
}

type TextureViewDesc struct @(cname="sg_texture_view_desc") {
    Image image;
    TextureViewRange mip_levels;
    TextureViewRange slices;
}

type ViewDesc struct @(cname="sg_view_desc") {
    u32 _start_canary;
    TextureViewDesc texture;
    BufferViewDesc storage_buffer;
    ImageViewDesc storage_image;
    ImageViewDesc color_attachment;
    ImageViewDesc resolve_attachment;
    ImageViewDesc depth_stencil_attachment;
    const char* label;
    u32 _end_canary;
}

type SlotInfo struct @(cname="sg_slot_info") {
    ResourceState state;
    u32 res_id;
    u32 uninit_count;
}

type BufferInfo struct @(cname="sg_buffer_info") {
    SlotInfo slot;
    u32 update_frame_index;
    u32 append_frame_index;
    i32 append_pos;
    bool append_overflow;
    i32 num_slots;
    i32 active_slot;
}

type ImageInfo struct @(cname="sg_image_info") {
    SlotInfo slot;
    u32 upd_frame_index;
    i32 num_slots;
    i32 active_slot;
}

type SamplerInfo struct @(cname="sg_sampler_info") {
    SlotInfo slot;
}

type ShaderInfo struct @(cname="sg_shader_info") {
    SlotInfo slot;
}

type PipelineInfo struct @(cname="sg_pipeline_info") {
    SlotInfo slot;
}

type ViewInfo struct @(cname="sg_view_info") {
    SlotInfo slot;
}

type FrameStatsGl struct @(cname="sg_frame_stats_gl") {
    u32 num_bind_buffer;
    u32 num_active_texture;
    u32 num_bind_texture;
    u32 num_bind_sampler;
    u32 num_bind_image_texture;
    u32 num_use_program;
    u32 num_render_state;
    u32 num_vertex_attrib_pointer;
    u32 num_vertex_attrib_divisor;
    u32 num_enable_vertex_attrib_array;
    u32 num_disable_vertex_attrib_array;
    u32 num_uniform;
    u32 num_memory_barriers;
}

type FrameStatsD3d11Pass struct @(cname="sg_frame_stats_d3d11_pass") {
    u32 num_om_set_render_targets;
    u32 num_clear_render_target_view;
    u32 num_clear_depth_stencil_view;
    u32 num_resolve_subresource;
}

type FrameStatsD3d11Pipeline struct @(cname="sg_frame_stats_d3d11_pipeline") {
    u32 num_rs_set_state;
    u32 num_om_set_depth_stencil_state;
    u32 num_om_set_blend_state;
    u32 num_ia_set_primitive_topology;
    u32 num_ia_set_input_layout;
    u32 num_vs_set_shader;
    u32 num_vs_set_constant_buffers;
    u32 num_ps_set_shader;
    u32 num_ps_set_constant_buffers;
    u32 num_cs_set_shader;
    u32 num_cs_set_constant_buffers;
}

type FrameStatsD3d11Bindings struct @(cname="sg_frame_stats_d3d11_bindings") {
    u32 num_ia_set_vertex_buffers;
    u32 num_ia_set_index_buffer;
    u32 num_vs_set_shader_resources;
    u32 num_vs_set_samplers;
    u32 num_ps_set_shader_resources;
    u32 num_ps_set_samplers;
    u32 num_cs_set_shader_resources;
    u32 num_cs_set_samplers;
    u32 num_cs_set_unordered_access_views;
}

type FrameStatsD3d11Uniforms struct @(cname="sg_frame_stats_d3d11_uniforms") {
    u32 num_update_subresource;
}

type FrameStatsD3d11Draw struct @(cname="sg_frame_stats_d3d11_draw") {
    u32 num_draw_indexed_instanced;
    u32 num_draw_indexed;
    u32 num_draw_instanced;
    u32 num_draw;
}

type FrameStatsD3d11 struct @(cname="sg_frame_stats_d3d11") {
    FrameStatsD3d11Pass pass;
    FrameStatsD3d11Pipeline pipeline;
    FrameStatsD3d11Bindings bindings;
    FrameStatsD3d11Uniforms uniforms;
    FrameStatsD3d11Draw draw;
    u32 num_map;
    u32 num_unmap;
}

type FrameStatsMetalIdpool struct @(cname="sg_frame_stats_metal_idpool") {
    u32 num_added;
    u32 num_released;
    u32 num_garbage_collected;
}

type FrameStatsMetalPipeline struct @(cname="sg_frame_stats_metal_pipeline") {
    u32 num_set_blend_color;
    u32 num_set_cull_mode;
    u32 num_set_front_facing_winding;
    u32 num_set_stencil_reference_value;
    u32 num_set_depth_bias;
    u32 num_set_render_pipeline_state;
    u32 num_set_depth_stencil_state;
}

type FrameStatsMetalBindings struct @(cname="sg_frame_stats_metal_bindings") {
    u32 num_set_vertex_buffer;
    u32 num_set_vertex_buffer_offset;
    u32 num_skip_redundant_vertex_buffer;
    u32 num_set_vertex_texture;
    u32 num_skip_redundant_vertex_texture;
    u32 num_set_vertex_sampler_state;
    u32 num_skip_redundant_vertex_sampler_state;
    u32 num_set_fragment_buffer;
    u32 num_set_fragment_buffer_offset;
    u32 num_skip_redundant_fragment_buffer;
    u32 num_set_fragment_texture;
    u32 num_skip_redundant_fragment_texture;
    u32 num_set_fragment_sampler_state;
    u32 num_skip_redundant_fragment_sampler_state;
    u32 num_set_compute_buffer;
    u32 num_set_compute_buffer_offset;
    u32 num_skip_redundant_compute_buffer;
    u32 num_set_compute_texture;
    u32 num_skip_redundant_compute_texture;
    u32 num_set_compute_sampler_state;
    u32 num_skip_redundant_compute_sampler_state;
}

type FrameStatsMetalUniforms struct @(cname="sg_frame_stats_metal_uniforms") {
    u32 num_set_vertex_buffer_offset;
    u32 num_set_fragment_buffer_offset;
    u32 num_set_compute_buffer_offset;
}

type FrameStatsMetal struct @(cname="sg_frame_stats_metal") {
    FrameStatsMetalIdpool idpool;
    FrameStatsMetalPipeline pipeline;
    FrameStatsMetalBindings bindings;
    FrameStatsMetalUniforms uniforms;
}

type FrameStatsWgpuUniforms struct @(cname="sg_frame_stats_wgpu_uniforms") {
    u32 num_set_bindgroup;
    u32 size_write_buffer;
}

type FrameStatsWgpuBindings struct @(cname="sg_frame_stats_wgpu_bindings") {
    u32 num_set_vertex_buffer;
    u32 num_skip_redundant_vertex_buffer;
    u32 num_set_index_buffer;
    u32 num_skip_redundant_index_buffer;
    u32 num_create_bindgroup;
    u32 num_discard_bindgroup;
    u32 num_set_bindgroup;
    u32 num_skip_redundant_bindgroup;
    u32 num_bindgroup_cache_hits;
    u32 num_bindgroup_cache_misses;
    u32 num_bindgroup_cache_collisions;
    u32 num_bindgroup_cache_invalidates;
    u32 num_bindgroup_cache_hash_vs_key_mismatch;
}

type FrameStatsWgpu struct @(cname="sg_frame_stats_wgpu") {
    FrameStatsWgpuUniforms uniforms;
    FrameStatsWgpuBindings bindings;
}

type ResourceStats struct @(cname="sg_resource_stats") {
    u32 total_alive;
    u32 total_free;
    u32 allocated;
    u32 deallocated;
    u32 inited;
    u32 uninited;
}

type FrameStats struct @(cname="sg_frame_stats") {
    u32 frame_index;
    u32 num_passes;
    u32 num_apply_viewport;
    u32 num_apply_scissor_rect;
    u32 num_apply_pipeline;
    u32 num_apply_bindings;
    u32 num_apply_uniforms;
    u32 num_draw;
    u32 num_draw_ex;
    u32 num_dispatch;
    u32 num_update_buffer;
    u32 num_append_buffer;
    u32 num_update_image;
    u32 size_apply_uniforms;
    u32 size_update_buffer;
    u32 size_append_buffer;
    u32 size_update_image;
    ResourceStats buffers;
    ResourceStats images;
    ResourceStats samplers;
    ResourceStats views;
    ResourceStats shaders;
    ResourceStats pipelines;
    FrameStatsGl gl;
    FrameStatsD3d11 d3d11;
    FrameStatsMetal metal;
    FrameStatsWgpu wgpu;
}

type LogItem enum i32 @(cname="sg_log_item") {
    OK = 0,
    MALLOC_FAILED = 1,
    GL_TEXTURE_FORMAT_NOT_SUPPORTED = 2,
    GL_3D_TEXTURES_NOT_SUPPORTED = 3,
    GL_ARRAY_TEXTURES_NOT_SUPPORTED = 4,
    GL_STORAGEBUFFER_GLSL_BINDING_OUT_OF_RANGE = 5,
    GL_STORAGEIMAGE_GLSL_BINDING_OUT_OF_RANGE = 6,
    GL_SHADER_COMPILATION_FAILED = 7,
    GL_SHADER_LINKING_FAILED = 8,
    GL_VERTEX_ATTRIBUTE_NOT_FOUND_IN_SHADER = 9,
    GL_UNIFORMBLOCK_NAME_NOT_FOUND_IN_SHADER = 10,
    GL_IMAGE_SAMPLER_NAME_NOT_FOUND_IN_SHADER = 11,
    GL_FRAMEBUFFER_STATUS_UNDEFINED = 12,
    GL_FRAMEBUFFER_STATUS_INCOMPLETE_ATTACHMENT = 13,
    GL_FRAMEBUFFER_STATUS_INCOMPLETE_MISSING_ATTACHMENT = 14,
    GL_FRAMEBUFFER_STATUS_UNSUPPORTED = 15,
    GL_FRAMEBUFFER_STATUS_INCOMPLETE_MULTISAMPLE = 16,
    GL_FRAMEBUFFER_STATUS_UNKNOWN = 17,
    D3D11_FEATURE_LEVEL_0_DETECTED = 18,
    D3D11_CREATE_BUFFER_FAILED = 19,
    D3D11_CREATE_BUFFER_SRV_FAILED = 20,
    D3D11_CREATE_BUFFER_UAV_FAILED = 21,
    D3D11_CREATE_DEPTH_TEXTURE_UNSUPPORTED_PIXEL_FORMAT = 22,
    D3D11_CREATE_DEPTH_TEXTURE_FAILED = 23,
    D3D11_CREATE_2D_TEXTURE_UNSUPPORTED_PIXEL_FORMAT = 24,
    D3D11_CREATE_2D_TEXTURE_FAILED = 25,
    D3D11_CREATE_2D_SRV_FAILED = 26,
    D3D11_CREATE_3D_TEXTURE_UNSUPPORTED_PIXEL_FORMAT = 27,
    D3D11_CREATE_3D_TEXTURE_FAILED = 28,
    D3D11_CREATE_3D_SRV_FAILED = 29,
    D3D11_CREATE_MSAA_TEXTURE_FAILED = 30,
    D3D11_CREATE_SAMPLER_STATE_FAILED = 31,
    D3D11_UNIFORMBLOCK_HLSL_REGISTER_B_OUT_OF_RANGE = 32,
    D3D11_STORAGEBUFFER_HLSL_REGISTER_T_OUT_OF_RANGE = 33,
    D3D11_STORAGEBUFFER_HLSL_REGISTER_U_OUT_OF_RANGE = 34,
    D3D11_IMAGE_HLSL_REGISTER_T_OUT_OF_RANGE = 35,
    D3D11_STORAGEIMAGE_HLSL_REGISTER_U_OUT_OF_RANGE = 36,
    D3D11_SAMPLER_HLSL_REGISTER_S_OUT_OF_RANGE = 37,
    D3D11_LOAD_D3DCOMPILER_47_DLL_FAILED = 38,
    D3D11_SHADER_COMPILATION_FAILED = 39,
    D3D11_SHADER_COMPILATION_OUTPUT = 40,
    D3D11_CREATE_CONSTANT_BUFFER_FAILED = 41,
    D3D11_CREATE_INPUT_LAYOUT_FAILED = 42,
    D3D11_CREATE_RASTERIZER_STATE_FAILED = 43,
    D3D11_CREATE_DEPTH_STENCIL_STATE_FAILED = 44,
    D3D11_CREATE_BLEND_STATE_FAILED = 45,
    D3D11_CREATE_RTV_FAILED = 46,
    D3D11_CREATE_DSV_FAILED = 47,
    D3D11_CREATE_UAV_FAILED = 48,
    D3D11_MAP_FOR_UPDATE_BUFFER_FAILED = 49,
    D3D11_MAP_FOR_APPEND_BUFFER_FAILED = 50,
    D3D11_MAP_FOR_UPDATE_IMAGE_FAILED = 51,
    METAL_CREATE_BUFFER_FAILED = 52,
    METAL_TEXTURE_FORMAT_NOT_SUPPORTED = 53,
    METAL_CREATE_TEXTURE_FAILED = 54,
    METAL_CREATE_SAMPLER_FAILED = 55,
    METAL_SHADER_COMPILATION_FAILED = 56,
    METAL_SHADER_CREATION_FAILED = 57,
    METAL_SHADER_COMPILATION_OUTPUT = 58,
    METAL_SHADER_ENTRY_NOT_FOUND = 59,
    METAL_UNIFORMBLOCK_MSL_BUFFER_SLOT_OUT_OF_RANGE = 60,
    METAL_STORAGEBUFFER_MSL_BUFFER_SLOT_OUT_OF_RANGE = 61,
    METAL_STORAGEIMAGE_MSL_TEXTURE_SLOT_OUT_OF_RANGE = 62,
    METAL_IMAGE_MSL_TEXTURE_SLOT_OUT_OF_RANGE = 63,
    METAL_SAMPLER_MSL_SAMPLER_SLOT_OUT_OF_RANGE = 64,
    METAL_CREATE_CPS_FAILED = 65,
    METAL_CREATE_CPS_OUTPUT = 66,
    METAL_CREATE_RPS_FAILED = 67,
    METAL_CREATE_RPS_OUTPUT = 68,
    METAL_CREATE_DSS_FAILED = 69,
    WGPU_BINDGROUPS_POOL_EXHAUSTED = 70,
    WGPU_BINDGROUPSCACHE_SIZE_GREATER_ONE = 71,
    WGPU_BINDGROUPSCACHE_SIZE_POW2 = 72,
    WGPU_CREATEBINDGROUP_FAILED = 73,
    WGPU_CREATE_BUFFER_FAILED = 74,
    WGPU_CREATE_TEXTURE_FAILED = 75,
    WGPU_CREATE_TEXTURE_VIEW_FAILED = 76,
    WGPU_CREATE_SAMPLER_FAILED = 77,
    WGPU_CREATE_SHADER_MODULE_FAILED = 78,
    WGPU_SHADER_CREATE_BINDGROUP_LAYOUT_FAILED = 79,
    WGPU_UNIFORMBLOCK_WGSL_GROUP0_BINDING_OUT_OF_RANGE = 80,
    WGPU_TEXTURE_WGSL_GROUP1_BINDING_OUT_OF_RANGE = 81,
    WGPU_STORAGEBUFFER_WGSL_GROUP1_BINDING_OUT_OF_RANGE = 82,
    WGPU_STORAGEIMAGE_WGSL_GROUP1_BINDING_OUT_OF_RANGE = 83,
    WGPU_SAMPLER_WGSL_GROUP1_BINDING_OUT_OF_RANGE = 84,
    WGPU_CREATE_PIPELINE_LAYOUT_FAILED = 85,
    WGPU_CREATE_RENDER_PIPELINE_FAILED = 86,
    WGPU_CREATE_COMPUTE_PIPELINE_FAILED = 87,
    IDENTICAL_COMMIT_LISTENER = 88,
    COMMIT_LISTENER_ARRAY_FULL = 89,
    TRACE_HOOKS_NOT_ENABLED = 90,
    DEALLOC_BUFFER_INVALID_STATE = 91,
    DEALLOC_IMAGE_INVALID_STATE = 92,
    DEALLOC_SAMPLER_INVALID_STATE = 93,
    DEALLOC_SHADER_INVALID_STATE = 94,
    DEALLOC_PIPELINE_INVALID_STATE = 95,
    DEALLOC_VIEW_INVALID_STATE = 96,
    INIT_BUFFER_INVALID_STATE = 97,
    INIT_IMAGE_INVALID_STATE = 98,
    INIT_SAMPLER_INVALID_STATE = 99,
    INIT_SHADER_INVALID_STATE = 100,
    INIT_PIPELINE_INVALID_STATE = 101,
    INIT_VIEW_INVALID_STATE = 102,
    UNINIT_BUFFER_INVALID_STATE = 103,
    UNINIT_IMAGE_INVALID_STATE = 104,
    UNINIT_SAMPLER_INVALID_STATE = 105,
    UNINIT_SHADER_INVALID_STATE = 106,
    UNINIT_PIPELINE_INVALID_STATE = 107,
    UNINIT_VIEW_INVALID_STATE = 108,
    FAIL_BUFFER_INVALID_STATE = 109,
    FAIL_IMAGE_INVALID_STATE = 110,
    FAIL_SAMPLER_INVALID_STATE = 111,
    FAIL_SHADER_INVALID_STATE = 112,
    FAIL_PIPELINE_INVALID_STATE = 113,
    FAIL_VIEW_INVALID_STATE = 114,
    BUFFER_POOL_EXHAUSTED = 115,
    IMAGE_POOL_EXHAUSTED = 116,
    SAMPLER_POOL_EXHAUSTED = 117,
    SHADER_POOL_EXHAUSTED = 118,
    PIPELINE_POOL_EXHAUSTED = 119,
    VIEW_POOL_EXHAUSTED = 120,
    BEGINPASS_TOO_MANY_COLOR_ATTACHMENTS = 121,
    BEGINPASS_TOO_MANY_RESOLVE_ATTACHMENTS = 122,
    BEGINPASS_ATTACHMENTS_ALIVE = 123,
    DRAW_WITHOUT_BINDINGS = 124,
    SHADERDESC_TOO_MANY_VERTEXSTAGE_TEXTURES = 125,
    SHADERDESC_TOO_MANY_FRAGMENTSTAGE_TEXTURES = 126,
    SHADERDESC_TOO_MANY_COMPUTESTAGE_TEXTURES = 127,
    SHADERDESC_TOO_MANY_VERTEXSTAGE_STORAGEBUFFERS = 128,
    SHADERDESC_TOO_MANY_FRAGMENTSTAGE_STORAGEBUFFERS = 129,
    SHADERDESC_TOO_MANY_COMPUTESTAGE_STORAGEBUFFERS = 130,
    SHADERDESC_TOO_MANY_VERTEXSTAGE_STORAGEIMAGES = 131,
    SHADERDESC_TOO_MANY_FRAGMENTSTAGE_STORAGEIMAGES = 132,
    SHADERDESC_TOO_MANY_COMPUTESTAGE_STORAGEIMAGES = 133,
    SHADERDESC_TOO_MANY_VERTEXSTAGE_TEXTURESAMPLERPAIRS = 134,
    SHADERDESC_TOO_MANY_FRAGMENTSTAGE_TEXTURESAMPLERPAIRS = 135,
    SHADERDESC_TOO_MANY_COMPUTESTAGE_TEXTURESAMPLERPAIRS = 136,
    VALIDATE_BUFFERDESC_CANARY = 137,
    VALIDATE_BUFFERDESC_IMMUTABLE_DYNAMIC_STREAM = 138,
    VALIDATE_BUFFERDESC_SEPARATE_BUFFER_TYPES = 139,
    VALIDATE_BUFFERDESC_EXPECT_NONZERO_SIZE = 140,
    VALIDATE_BUFFERDESC_EXPECT_MATCHING_DATA_SIZE = 141,
    VALIDATE_BUFFERDESC_EXPECT_ZERO_DATA_SIZE = 142,
    VALIDATE_BUFFERDESC_EXPECT_NO_DATA = 143,
    VALIDATE_BUFFERDESC_EXPECT_DATA = 144,
    VALIDATE_BUFFERDESC_STORAGEBUFFER_SUPPORTED = 145,
    VALIDATE_BUFFERDESC_STORAGEBUFFER_SIZE_MULTIPLE_4 = 146,
    VALIDATE_IMAGEDATA_NODATA = 147,
    VALIDATE_IMAGEDATA_DATA_SIZE = 148,
    VALIDATE_IMAGEDESC_CANARY = 149,
    VALIDATE_IMAGEDESC_IMMUTABLE_DYNAMIC_STREAM = 150,
    VALIDATE_IMAGEDESC_IMAGETYPE_2D_NUMSLICES = 151,
    VALIDATE_IMAGEDESC_IMAGETYPE_CUBE_NUMSLICES = 152,
    VALIDATE_IMAGEDESC_IMAGETYPE_ARRAY_NUMSLICES = 153,
    VALIDATE_IMAGEDESC_IMAGETYPE_3D_NUMSLICES = 154,
    VALIDATE_IMAGEDESC_NUMSLICES = 155,
    VALIDATE_IMAGEDESC_WIDTH = 156,
    VALIDATE_IMAGEDESC_HEIGHT = 157,
    VALIDATE_IMAGEDESC_NONRT_PIXELFORMAT = 158,
    VALIDATE_IMAGEDESC_MSAA_BUT_NO_ATTACHMENT = 159,
    VALIDATE_IMAGEDESC_DEPTH_3D_IMAGE = 160,
    VALIDATE_IMAGEDESC_ATTACHMENT_EXPECT_IMMUTABLE = 161,
    VALIDATE_IMAGEDESC_ATTACHMENT_EXPECT_NO_DATA = 162,
    VALIDATE_IMAGEDESC_ATTACHMENT_PIXELFORMAT = 163,
    VALIDATE_IMAGEDESC_ATTACHMENT_RESOLVE_EXPECT_NO_MSAA = 164,
    VALIDATE_IMAGEDESC_ATTACHMENT_NO_MSAA_SUPPORT = 165,
    VALIDATE_IMAGEDESC_ATTACHMENT_MSAA_NUM_MIPMAPS = 166,
    VALIDATE_IMAGEDESC_ATTACHMENT_MSAA_3D_IMAGE = 167,
    VALIDATE_IMAGEDESC_ATTACHMENT_MSAA_CUBE_IMAGE = 168,
    VALIDATE_IMAGEDESC_ATTACHMENT_MSAA_ARRAY_IMAGE = 169,
    VALIDATE_IMAGEDESC_STORAGEIMAGE_PIXELFORMAT = 170,
    VALIDATE_IMAGEDESC_STORAGEIMAGE_EXPECT_NO_MSAA = 171,
    VALIDATE_IMAGEDESC_INJECTED_NO_DATA = 172,
    VALIDATE_IMAGEDESC_DYNAMIC_NO_DATA = 173,
    VALIDATE_IMAGEDESC_COMPRESSED_IMMUTABLE = 174,
    VALIDATE_SAMPLERDESC_CANARY = 175,
    VALIDATE_SAMPLERDESC_ANISTROPIC_REQUIRES_LINEAR_FILTERING = 176,
    VALIDATE_SHADERDESC_CANARY = 177,
    VALIDATE_SHADERDESC_VERTEX_SOURCE = 178,
    VALIDATE_SHADERDESC_FRAGMENT_SOURCE = 179,
    VALIDATE_SHADERDESC_COMPUTE_SOURCE = 180,
    VALIDATE_SHADERDESC_VERTEX_SOURCE_OR_BYTECODE = 181,
    VALIDATE_SHADERDESC_FRAGMENT_SOURCE_OR_BYTECODE = 182,
    VALIDATE_SHADERDESC_COMPUTE_SOURCE_OR_BYTECODE = 183,
    VALIDATE_SHADERDESC_INVALID_SHADER_COMBO = 184,
    VALIDATE_SHADERDESC_NO_BYTECODE_SIZE = 185,
    VALIDATE_SHADERDESC_METAL_THREADS_PER_THREADGROUP_INITIALIZED = 186,
    VALIDATE_SHADERDESC_METAL_THREADS_PER_THREADGROUP_MULTIPLE_32 = 187,
    VALIDATE_SHADERDESC_UNIFORMBLOCK_NO_CONT_MEMBERS = 188,
    VALIDATE_SHADERDESC_UNIFORMBLOCK_SIZE_IS_ZERO = 189,
    VALIDATE_SHADERDESC_UNIFORMBLOCK_METAL_BUFFER_SLOT_COLLISION = 190,
    VALIDATE_SHADERDESC_UNIFORMBLOCK_HLSL_REGISTER_B_COLLISION = 191,
    VALIDATE_SHADERDESC_UNIFORMBLOCK_WGSL_GROUP0_BINDING_COLLISION = 192,
    VALIDATE_SHADERDESC_UNIFORMBLOCK_NO_MEMBERS = 193,
    VALIDATE_SHADERDESC_UNIFORMBLOCK_UNIFORM_GLSL_NAME = 194,
    VALIDATE_SHADERDESC_UNIFORMBLOCK_SIZE_MISMATCH = 195,
    VALIDATE_SHADERDESC_UNIFORMBLOCK_ARRAY_COUNT = 196,
    VALIDATE_SHADERDESC_UNIFORMBLOCK_STD140_ARRAY_TYPE = 197,
    VALIDATE_SHADERDESC_VIEW_STORAGEBUFFER_METAL_BUFFER_SLOT_COLLISION = 198,
    VALIDATE_SHADERDESC_VIEW_STORAGEBUFFER_HLSL_REGISTER_T_COLLISION = 199,
    VALIDATE_SHADERDESC_VIEW_STORAGEBUFFER_HLSL_REGISTER_U_COLLISION = 200,
    VALIDATE_SHADERDESC_VIEW_STORAGEBUFFER_GLSL_BINDING_COLLISION = 201,
    VALIDATE_SHADERDESC_VIEW_STORAGEBUFFER_WGSL_GROUP1_BINDING_COLLISION = 202,
    VALIDATE_SHADERDESC_VIEW_STORAGEIMAGE_EXPECT_COMPUTE_STAGE = 203,
    VALIDATE_SHADERDESC_VIEW_STORAGEIMAGE_METAL_TEXTURE_SLOT_COLLISION = 204,
    VALIDATE_SHADERDESC_VIEW_STORAGEIMAGE_HLSL_REGISTER_U_COLLISION = 205,
    VALIDATE_SHADERDESC_VIEW_STORAGEIMAGE_GLSL_BINDING_COLLISION = 206,
    VALIDATE_SHADERDESC_VIEW_STORAGEIMAGE_WGSL_GROUP1_BINDING_COLLISION = 207,
    VALIDATE_SHADERDESC_VIEW_TEXTURE_METAL_TEXTURE_SLOT_COLLISION = 208,
    VALIDATE_SHADERDESC_VIEW_TEXTURE_HLSL_REGISTER_T_COLLISION = 209,
    VALIDATE_SHADERDESC_VIEW_TEXTURE_WGSL_GROUP1_BINDING_COLLISION = 210,
    VALIDATE_SHADERDESC_SAMPLER_METAL_SAMPLER_SLOT_COLLISION = 211,
    VALIDATE_SHADERDESC_SAMPLER_HLSL_REGISTER_S_COLLISION = 212,
    VALIDATE_SHADERDESC_SAMPLER_WGSL_GROUP1_BINDING_COLLISION = 213,
    VALIDATE_SHADERDESC_TEXTURE_SAMPLER_PAIR_VIEW_SLOT_OUT_OF_RANGE = 214,
    VALIDATE_SHADERDESC_TEXTURE_SAMPLER_PAIR_SAMPLER_SLOT_OUT_OF_RANGE = 215,
    VALIDATE_SHADERDESC_TEXTURE_SAMPLER_PAIR_TEXTURE_STAGE_MISMATCH = 216,
    VALIDATE_SHADERDESC_TEXTURE_SAMPLER_PAIR_EXPECT_TEXTURE_VIEW = 217,
    VALIDATE_SHADERDESC_TEXTURE_SAMPLER_PAIR_SAMPLER_STAGE_MISMATCH = 218,
    VALIDATE_SHADERDESC_TEXTURE_SAMPLER_PAIR_GLSL_NAME = 219,
    VALIDATE_SHADERDESC_NONFILTERING_SAMPLER_REQUIRED = 220,
    VALIDATE_SHADERDESC_COMPARISON_SAMPLER_REQUIRED = 221,
    VALIDATE_SHADERDESC_TEXVIEW_NOT_REFERENCED_BY_TEXTURE_SAMPLER_PAIRS = 222,
    VALIDATE_SHADERDESC_SAMPLER_NOT_REFERENCED_BY_TEXTURE_SAMPLER_PAIRS = 223,
    VALIDATE_SHADERDESC_ATTR_STRING_TOO_LONG = 224,
    VALIDATE_PIPELINEDESC_CANARY = 225,
    VALIDATE_PIPELINEDESC_SHADER = 226,
    VALIDATE_PIPELINEDESC_COMPUTE_SHADER_EXPECTED = 227,
    VALIDATE_PIPELINEDESC_NO_COMPUTE_SHADER_EXPECTED = 228,
    VALIDATE_PIPELINEDESC_NO_CONT_ATTRS = 229,
    VALIDATE_PIPELINEDESC_ATTR_BASETYPE_MISMATCH = 230,
    VALIDATE_PIPELINEDESC_LAYOUT_STRIDE4 = 231,
    VALIDATE_PIPELINEDESC_ATTR_SEMANTICS = 232,
    VALIDATE_PIPELINEDESC_SHADER_READONLY_STORAGEBUFFERS = 233,
    VALIDATE_PIPELINEDESC_BLENDOP_MINMAX_REQUIRES_BLENDFACTOR_ONE = 234,
    VALIDATE_VIEWDESC_CANARY = 235,
    VALIDATE_VIEWDESC_UNIQUE_VIEWTYPE = 236,
    VALIDATE_VIEWDESC_ANY_VIEWTYPE = 237,
    VALIDATE_VIEWDESC_RESOURCE_ALIVE = 238,
    VALIDATE_VIEWDESC_RESOURCE_FAILED = 239,
    VALIDATE_VIEWDESC_STORAGEBUFFER_OFFSET_VS_BUFFER_SIZE = 240,
    VALIDATE_VIEWDESC_STORAGEBUFFER_OFFSET_MULTIPLE_256 = 241,
    VALIDATE_VIEWDESC_STORAGEBUFFER_USAGE = 242,
    VALIDATE_VIEWDESC_STORAGEIMAGE_USAGE = 243,
    VALIDATE_VIEWDESC_COLORATTACHMENT_USAGE = 244,
    VALIDATE_VIEWDESC_RESOLVEATTACHMENT_USAGE = 245,
    VALIDATE_VIEWDESC_DEPTHSTENCILATTACHMENT_USAGE = 246,
    VALIDATE_VIEWDESC_IMAGE_MIPLEVEL = 247,
    VALIDATE_VIEWDESC_IMAGE_2D_SLICE = 248,
    VALIDATE_VIEWDESC_IMAGE_CUBEMAP_SLICE = 249,
    VALIDATE_VIEWDESC_IMAGE_ARRAY_SLICE = 250,
    VALIDATE_VIEWDESC_IMAGE_3D_SLICE = 251,
    VALIDATE_VIEWDESC_TEXTURE_EXPECT_NO_MSAA = 252,
    VALIDATE_VIEWDESC_TEXTURE_MIPLEVELS = 253,
    VALIDATE_VIEWDESC_TEXTURE_2D_SLICES = 254,
    VALIDATE_VIEWDESC_TEXTURE_CUBEMAP_SLICES = 255,
    VALIDATE_VIEWDESC_TEXTURE_ARRAY_SLICES = 256,
    VALIDATE_VIEWDESC_TEXTURE_3D_SLICES = 257,
    VALIDATE_VIEWDESC_STORAGEIMAGE_PIXELFORMAT = 258,
    VALIDATE_VIEWDESC_COLORATTACHMENT_PIXELFORMAT = 259,
    VALIDATE_VIEWDESC_DEPTHSTENCILATTACHMENT_PIXELFORMAT = 260,
    VALIDATE_VIEWDESC_RESOLVEATTACHMENT_SAMPLECOUNT = 261,
    VALIDATE_BEGINPASS_CANARY = 262,
    VALIDATE_BEGINPASS_COMPUTEPASS_EXPECT_NO_ATTACHMENTS = 263,
    VALIDATE_BEGINPASS_SWAPCHAIN_EXPECT_WIDTH = 264,
    VALIDATE_BEGINPASS_SWAPCHAIN_EXPECT_WIDTH_NOTSET = 265,
    VALIDATE_BEGINPASS_SWAPCHAIN_EXPECT_HEIGHT = 266,
    VALIDATE_BEGINPASS_SWAPCHAIN_EXPECT_HEIGHT_NOTSET = 267,
    VALIDATE_BEGINPASS_SWAPCHAIN_EXPECT_SAMPLECOUNT = 268,
    VALIDATE_BEGINPASS_SWAPCHAIN_EXPECT_SAMPLECOUNT_NOTSET = 269,
    VALIDATE_BEGINPASS_SWAPCHAIN_EXPECT_COLORFORMAT = 270,
    VALIDATE_BEGINPASS_SWAPCHAIN_EXPECT_COLORFORMAT_NOTSET = 271,
    VALIDATE_BEGINPASS_SWAPCHAIN_EXPECT_DEPTHFORMAT_NOTSET = 272,
    VALIDATE_BEGINPASS_SWAPCHAIN_METAL_EXPECT_CURRENTDRAWABLE = 273,
    VALIDATE_BEGINPASS_SWAPCHAIN_METAL_EXPECT_CURRENTDRAWABLE_NOTSET = 274,
    VALIDATE_BEGINPASS_SWAPCHAIN_METAL_EXPECT_DEPTHSTENCILTEXTURE = 275,
    VALIDATE_BEGINPASS_SWAPCHAIN_METAL_EXPECT_DEPTHSTENCILTEXTURE_NOTSET = 276,
    VALIDATE_BEGINPASS_SWAPCHAIN_METAL_EXPECT_MSAACOLORTEXTURE = 277,
    VALIDATE_BEGINPASS_SWAPCHAIN_METAL_EXPECT_MSAACOLORTEXTURE_NOTSET = 278,
    VALIDATE_BEGINPASS_SWAPCHAIN_D3D11_EXPECT_RENDERVIEW = 279,
    VALIDATE_BEGINPASS_SWAPCHAIN_D3D11_EXPECT_RENDERVIEW_NOTSET = 280,
    VALIDATE_BEGINPASS_SWAPCHAIN_D3D11_EXPECT_RESOLVEVIEW = 281,
    VALIDATE_BEGINPASS_SWAPCHAIN_D3D11_EXPECT_RESOLVEVIEW_NOTSET = 282,
    VALIDATE_BEGINPASS_SWAPCHAIN_D3D11_EXPECT_DEPTHSTENCILVIEW = 283,
    VALIDATE_BEGINPASS_SWAPCHAIN_D3D11_EXPECT_DEPTHSTENCILVIEW_NOTSET = 284,
    VALIDATE_BEGINPASS_SWAPCHAIN_WGPU_EXPECT_RENDERVIEW = 285,
    VALIDATE_BEGINPASS_SWAPCHAIN_WGPU_EXPECT_RENDERVIEW_NOTSET = 286,
    VALIDATE_BEGINPASS_SWAPCHAIN_WGPU_EXPECT_RESOLVEVIEW = 287,
    VALIDATE_BEGINPASS_SWAPCHAIN_WGPU_EXPECT_RESOLVEVIEW_NOTSET = 288,
    VALIDATE_BEGINPASS_SWAPCHAIN_WGPU_EXPECT_DEPTHSTENCILVIEW = 289,
    VALIDATE_BEGINPASS_SWAPCHAIN_WGPU_EXPECT_DEPTHSTENCILVIEW_NOTSET = 290,
    VALIDATE_BEGINPASS_SWAPCHAIN_GL_EXPECT_FRAMEBUFFER_NOTSET = 291,
    VALIDATE_BEGINPASS_COLORATTACHMENTVIEWS_CONTINUOUS = 292,
    VALIDATE_BEGINPASS_COLORATTACHMENTVIEW_ALIVE = 293,
    VALIDATE_BEGINPASS_COLORATTACHMENTVIEW_VALID = 294,
    VALIDATE_BEGINPASS_COLORATTACHMENTVIEW_TYPE = 295,
    VALIDATE_BEGINPASS_COLORATTACHMENTVIEW_IMAGE_ALIVE = 296,
    VALIDATE_BEGINPASS_COLORATTACHMENTVIEW_IMAGE_VALID = 297,
    VALIDATE_BEGINPASS_COLORATTACHMENTVIEW_SIZES = 298,
    VALIDATE_BEGINPASS_COLORATTACHMENTVIEW_SAMPLECOUNTS = 299,
    VALIDATE_BEGINPASS_RESOLVEATTACHMENTVIEW_NO_COLORATTACHMENTVIEW = 300,
    VALIDATE_BEGINPASS_RESOLVEATTACHMENTVIEW_ALIVE = 301,
    VALIDATE_BEGINPASS_RESOLVEATTACHMENTVIEW_VALID = 302,
    VALIDATE_BEGINPASS_RESOLVEATTACHMENTVIEW_TYPE = 303,
    VALIDATE_BEGINPASS_RESOLVEATTACHMENTVIEW_IMAGE_ALIVE = 304,
    VALIDATE_BEGINPASS_RESOLVEATTACHMENTVIEW_IMAGE_VALID = 305,
    VALIDATE_BEGINPASS_RESOLVEATTACHMENTVIEW_SIZES = 306,
    VALIDATE_BEGINPASS_DEPTHSTENCILATTACHMENTVIEWS_CONTINUOUS = 307,
    VALIDATE_BEGINPASS_DEPTHSTENCILATTACHMENTVIEW_ALIVE = 308,
    VALIDATE_BEGINPASS_DEPTHSTENCILATTACHMENTVIEW_VALID = 309,
    VALIDATE_BEGINPASS_DEPTHSTENCILATTACHMENTVIEW_TYPE = 310,
    VALIDATE_BEGINPASS_DEPTHSTENCILATTACHMENTVIEW_IMAGE_ALIVE = 311,
    VALIDATE_BEGINPASS_DEPTHSTENCILATTACHMENTVIEW_IMAGE_VALID = 312,
    VALIDATE_BEGINPASS_DEPTHSTENCILATTACHMENTVIEW_SIZES = 313,
    VALIDATE_BEGINPASS_DEPTHSTENCILATTACHMENTVIEW_SAMPLECOUNT = 314,
    VALIDATE_BEGINPASS_ATTACHMENTS_EXPECTED = 315,
    VALIDATE_AVP_RENDERPASS_EXPECTED = 316,
    VALIDATE_ASR_RENDERPASS_EXPECTED = 317,
    VALIDATE_APIP_PIPELINE_VALID_ID = 318,
    VALIDATE_APIP_PIPELINE_EXISTS = 319,
    VALIDATE_APIP_PIPELINE_VALID = 320,
    VALIDATE_APIP_PASS_EXPECTED = 321,
    VALIDATE_APIP_PIPELINE_SHADER_ALIVE = 322,
    VALIDATE_APIP_PIPELINE_SHADER_VALID = 323,
    VALIDATE_APIP_COMPUTEPASS_EXPECTED = 324,
    VALIDATE_APIP_RENDERPASS_EXPECTED = 325,
    VALIDATE_APIP_SWAPCHAIN_COLOR_COUNT = 326,
    VALIDATE_APIP_SWAPCHAIN_COLOR_FORMAT = 327,
    VALIDATE_APIP_SWAPCHAIN_DEPTH_FORMAT = 328,
    VALIDATE_APIP_SWAPCHAIN_SAMPLE_COUNT = 329,
    VALIDATE_APIP_ATTACHMENTS_ALIVE = 330,
    VALIDATE_APIP_COLORATTACHMENTS_COUNT = 331,
    VALIDATE_APIP_COLORATTACHMENTS_VIEW_VALID = 332,
    VALIDATE_APIP_COLORATTACHMENTS_IMAGE_VALID = 333,
    VALIDATE_APIP_COLORATTACHMENTS_FORMAT = 334,
    VALIDATE_APIP_DEPTHSTENCILATTACHMENT_VIEW_VALID = 335,
    VALIDATE_APIP_DEPTHSTENCILATTACHMENT_IMAGE_VALID = 336,
    VALIDATE_APIP_DEPTHSTENCILATTACHMENT_FORMAT = 337,
    VALIDATE_APIP_ATTACHMENT_SAMPLE_COUNT = 338,
    VALIDATE_ABND_PASS_EXPECTED = 339,
    VALIDATE_ABND_EMPTY_BINDINGS = 340,
    VALIDATE_ABND_NO_PIPELINE = 341,
    VALIDATE_ABND_PIPELINE_ALIVE = 342,
    VALIDATE_ABND_PIPELINE_VALID = 343,
    VALIDATE_ABND_PIPELINE_SHADER_ALIVE = 344,
    VALIDATE_ABND_PIPELINE_SHADER_VALID = 345,
    VALIDATE_ABND_COMPUTE_EXPECTED_NO_VBUFS = 346,
    VALIDATE_ABND_COMPUTE_EXPECTED_NO_IBUF = 347,
    VALIDATE_ABND_EXPECTED_VBUF = 348,
    VALIDATE_ABND_VBUF_ALIVE = 349,
    VALIDATE_ABND_VBUF_USAGE = 350,
    VALIDATE_ABND_VBUF_OVERFLOW = 351,
    VALIDATE_ABND_EXPECTED_NO_IBUF = 352,
    VALIDATE_ABND_EXPECTED_IBUF = 353,
    VALIDATE_ABND_IBUF_ALIVE = 354,
    VALIDATE_ABND_IBUF_USAGE = 355,
    VALIDATE_ABND_IBUF_OVERFLOW = 356,
    VALIDATE_ABND_EXPECTED_VIEW_BINDING = 357,
    VALIDATE_ABND_VIEW_ALIVE = 358,
    VALIDATE_ABND_EXPECT_TEXVIEW = 359,
    VALIDATE_ABND_EXPECT_SBVIEW = 360,
    VALIDATE_ABND_EXPECT_SIMGVIEW = 361,
    VALIDATE_ABND_TEXVIEW_IMAGETYPE_MISMATCH = 362,
    VALIDATE_ABND_TEXVIEW_EXPECTED_MULTISAMPLED_IMAGE = 363,
    VALIDATE_ABND_TEXVIEW_EXPECTED_NON_MULTISAMPLED_IMAGE = 364,
    VALIDATE_ABND_TEXVIEW_EXPECTED_FILTERABLE_IMAGE = 365,
    VALIDATE_ABND_TEXVIEW_EXPECTED_DEPTH_IMAGE = 366,
    VALIDATE_ABND_SBVIEW_READWRITE_IMMUTABLE = 367,
    VALIDATE_ABND_SIMGVIEW_COMPUTE_PASS_EXPECTED = 368,
    VALIDATE_ABND_SIMGVIEW_IMAGETYPE_MISMATCH = 369,
    VALIDATE_ABND_SIMGVIEW_ACCESSFORMAT = 370,
    VALIDATE_ABND_EXPECTED_SAMPLER_BINDING = 371,
    VALIDATE_ABND_UNEXPECTED_SAMPLER_COMPARE_NEVER = 372,
    VALIDATE_ABND_EXPECTED_SAMPLER_COMPARE_NEVER = 373,
    VALIDATE_ABND_EXPECTED_NONFILTERING_SAMPLER = 374,
    VALIDATE_ABND_SAMPLER_ALIVE = 375,
    VALIDATE_ABND_SAMPLER_VALID = 376,
    VALIDATE_ABND_TEXTURE_BINDING_VS_DEPTHSTENCIL_ATTACHMENT = 377,
    VALIDATE_ABND_TEXTURE_BINDING_VS_COLOR_ATTACHMENT = 378,
    VALIDATE_ABND_TEXTURE_BINDING_VS_RESOLVE_ATTACHMENT = 379,
    VALIDATE_ABND_TEXTURE_VS_STORAGEIMAGE_BINDING = 380,
    VALIDATE_AU_PASS_EXPECTED = 381,
    VALIDATE_AU_NO_PIPELINE = 382,
    VALIDATE_AU_PIPELINE_ALIVE = 383,
    VALIDATE_AU_PIPELINE_VALID = 384,
    VALIDATE_AU_PIPELINE_SHADER_ALIVE = 385,
    VALIDATE_AU_PIPELINE_SHADER_VALID = 386,
    VALIDATE_AU_NO_UNIFORMBLOCK_AT_SLOT = 387,
    VALIDATE_AU_SIZE = 388,
    VALIDATE_DRAW_RENDERPASS_EXPECTED = 389,
    VALIDATE_DRAW_BASEELEMENT_GE_ZERO = 390,
    VALIDATE_DRAW_NUMELEMENTS_GE_ZERO = 391,
    VALIDATE_DRAW_NUMINSTANCES_GE_ZERO = 392,
    VALIDATE_DRAW_EX_RENDERPASS_EXPECTED = 393,
    VALIDATE_DRAW_EX_BASEELEMENT_GE_ZERO = 394,
    VALIDATE_DRAW_EX_NUMELEMENTS_GE_ZERO = 395,
    VALIDATE_DRAW_EX_NUMINSTANCES_GE_ZERO = 396,
    VALIDATE_DRAW_EX_BASEINSTANCE_GE_ZERO = 397,
    VALIDATE_DRAW_EX_BASEVERTEX_VS_INDEXED = 398,
    VALIDATE_DRAW_EX_BASEINSTANCE_VS_INSTANCED = 399,
    VALIDATE_DRAW_EX_BASEVERTEX_NOT_SUPPORTED = 400,
    VALIDATE_DRAW_EX_BASEINSTANCE_NOT_SUPPORTED = 401,
    VALIDATE_DRAW_REQUIRED_BINDINGS_OR_UNIFORMS_MISSING = 402,
    VALIDATE_DISPATCH_COMPUTEPASS_EXPECTED = 403,
    VALIDATE_DISPATCH_NUMGROUPSX = 404,
    VALIDATE_DISPATCH_NUMGROUPSY = 405,
    VALIDATE_DISPATCH_NUMGROUPSZ = 406,
    VALIDATE_DISPATCH_REQUIRED_BINDINGS_OR_UNIFORMS_MISSING = 407,
    VALIDATE_UPDATEBUF_USAGE = 408,
    VALIDATE_UPDATEBUF_SIZE = 409,
    VALIDATE_UPDATEBUF_ONCE = 410,
    VALIDATE_UPDATEBUF_APPEND = 411,
    VALIDATE_APPENDBUF_USAGE = 412,
    VALIDATE_APPENDBUF_SIZE = 413,
    VALIDATE_APPENDBUF_UPDATE = 414,
    VALIDATE_UPDIMG_USAGE = 415,
    VALIDATE_UPDIMG_ONCE = 416,
    VALIDATION_FAILED = 417,
}

type EnvironmentDefaults struct @(cname="sg_environment_defaults") {
    PixelFormat color_format;
    PixelFormat depth_format;
    i32 sample_count;
}

type MetalEnvironment struct @(cname="sg_metal_environment") {
    void* device;
}

type D3d11Environment struct @(cname="sg_d3d11_environment") {
    void* device;
    void* device_context;
}

type WgpuEnvironment struct @(cname="sg_wgpu_environment") {
    void* device;
}

type Environment struct @(cname="sg_environment") {
    EnvironmentDefaults defaults;
    MetalEnvironment metal;
    D3d11Environment d3d11;
    WgpuEnvironment wgpu;
}

type CommitListener struct @(cname="sg_commit_listener") {
    DataCb func;
    void* user_data;
}

type Allocator struct @(cname="sg_allocator") {
    AllocCb alloc_fn;
    FreeCb free_fn;
    void* user_data;
}

type Logger struct @(cname="sg_logger") {
    LogCb func;
    void* user_data;
}

type Desc struct @(cname="sg_desc") {
    u32 _start_canary;
    i32 buffer_pool_size;
    i32 image_pool_size;
    i32 sampler_pool_size;
    i32 shader_pool_size;
    i32 pipeline_pool_size;
    i32 view_pool_size;
    i32 uniform_buffer_size;
    i32 max_commit_listeners;
    bool disable_validation;
    bool enforce_portable_limits;
    bool d3d11_shader_debugging;
    bool mtl_force_managed_storage_mode;
    bool mtl_use_command_buffer_with_retained_references;
    bool wgpu_disable_bindgroups_cache;
    i32 wgpu_bindgroups_cache_size;
    Allocator allocator;
    Logger logger;
    Environment environment;
    u32 _end_canary;
}

type D3d11BufferInfo struct @(cname="sg_d3d11_buffer_info") {
    void* buf;
}

type D3d11ImageInfo struct @(cname="sg_d3d11_image_info") {
    void* tex2d;
    void* tex3d;
    void* res;
}

type D3d11SamplerInfo struct @(cname="sg_d3d11_sampler_info") {
    void* smp;
}

type D3d11ShaderInfo struct @(cname="sg_d3d11_shader_info") {
    void*[8] cbufs;
    void* vs;
    void* fs;
}

type D3d11PipelineInfo struct @(cname="sg_d3d11_pipeline_info") {
    void* il;
    void* rs;
    void* dss;
    void* bs;
}

type D3d11ViewInfo struct @(cname="sg_d3d11_view_info") {
    void* srv;
    void* uav;
    void* rtv;
    void* dsv;
}

type MtlBufferInfo struct @(cname="sg_mtl_buffer_info") {
    void*[2] buf;
    i32 active_slot;
}

type MtlImageInfo struct @(cname="sg_mtl_image_info") {
    void*[2] tex;
    i32 active_slot;
}

type MtlSamplerInfo struct @(cname="sg_mtl_sampler_info") {
    void* smp;
}

type MtlShaderInfo struct @(cname="sg_mtl_shader_info") {
    void* vertex_lib;
    void* fragment_lib;
    void* vertex_func;
    void* fragment_func;
}

type MtlPipelineInfo struct @(cname="sg_mtl_pipeline_info") {
    void* rps;
    void* dss;
}

type WgpuBufferInfo struct @(cname="sg_wgpu_buffer_info") {
    void* buf;
}

type WgpuImageInfo struct @(cname="sg_wgpu_image_info") {
    void* tex;
}

type WgpuSamplerInfo struct @(cname="sg_wgpu_sampler_info") {
    void* smp;
}

type WgpuShaderInfo struct @(cname="sg_wgpu_shader_info") {
    void* vs_mod;
    void* fs_mod;
    void* bgl;
}

type WgpuPipelineInfo struct @(cname="sg_wgpu_pipeline_info") {
    void* render_pipeline;
    void* compute_pipeline;
}

type WgpuViewInfo struct @(cname="sg_wgpu_view_info") {
    void* view;
}

type GlBufferInfo struct @(cname="sg_gl_buffer_info") {
    u32[2] buf;
    i32 active_slot;
}

type GlImageInfo struct @(cname="sg_gl_image_info") {
    u32[2] tex;
    u32 tex_target;
    i32 active_slot;
}

type GlSamplerInfo struct @(cname="sg_gl_sampler_info") {
    u32 smp;
}

type GlShaderInfo struct @(cname="sg_gl_shader_info") {
    u32 prog;
}

type GlViewInfo struct @(cname="sg_gl_view_info") {
    u32[2] tex_view;
    u32 msaa_render_buffer;
    u32 msaa_resolve_frame_buffer;
}

type DataCb fn void(void*);
type AllocCb fn void*(usize, void*);
type FreeCb fn void(void*, void*);
type LogCb fn void(const char*, u32, u32, const char*, u32, const char*, void*);

