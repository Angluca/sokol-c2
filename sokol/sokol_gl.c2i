// machine generated, do not edit
module sokol_gl;

fn void setup(Desc* desc) @(cname="sgl_setup");
fn void shutdown() @(cname="sgl_shutdown");
fn f32 rad(f32 deg) @(cname="sgl_rad");
fn f32 deg(f32 rad) @(cname="sgl_deg");
fn Error error() @(cname="sgl_error");
fn Error contextError(Context ctx) @(cname="sgl_context_error");
fn Context makeContext(ContextDesc* desc) @(cname="sgl_make_context");
fn void destroyContext(Context ctx) @(cname="sgl_destroy_context");
fn void setContext(Context ctx) @(cname="sgl_set_context");
fn Context getContext() @(cname="sgl_get_context");
fn Context defaultContext() @(cname="sgl_default_context");
fn i32 numVertices() @(cname="sgl_num_vertices");
fn i32 numCommands() @(cname="sgl_num_commands");
fn void draw() @(cname="sgl_draw");
fn void contextDraw(Context ctx) @(cname="sgl_context_draw");
fn void drawLayer(i32 layer_id) @(cname="sgl_draw_layer");
fn void contextDrawLayer(Context ctx, i32 layer_id) @(cname="sgl_context_draw_layer");
fn Pipeline makePipeline(PipelineDesc* desc) @(cname="sgl_make_pipeline");
fn Pipeline contextMakePipeline(Context ctx, PipelineDesc* desc) @(cname="sgl_context_make_pipeline");
fn void destroyPipeline(Pipeline pip) @(cname="sgl_destroy_pipeline");
fn void defaults() @(cname="sgl_defaults");
fn void viewport(i32 x, i32 y, i32 w, i32 h, bool origin_top_left) @(cname="sgl_viewport");
fn void viewportf(f32 x, f32 y, f32 w, f32 h, bool origin_top_left) @(cname="sgl_viewportf");
fn void scissorRect(i32 x, i32 y, i32 w, i32 h, bool origin_top_left) @(cname="sgl_scissor_rect");
fn void scissorRectf(f32 x, f32 y, f32 w, f32 h, bool origin_top_left) @(cname="sgl_scissor_rectf");
fn void enableTexture() @(cname="sgl_enable_texture");
fn void disableTexture() @(cname="sgl_disable_texture");
fn void texture(View tex_view, Sampler smp) @(cname="sgl_texture");
fn void layer(i32 layer_id) @(cname="sgl_layer");
fn void loadDefaultPipeline() @(cname="sgl_load_default_pipeline");
fn void loadPipeline(Pipeline pip) @(cname="sgl_load_pipeline");
fn void pushPipeline() @(cname="sgl_push_pipeline");
fn void popPipeline() @(cname="sgl_pop_pipeline");
fn void matrixModeModelview() @(cname="sgl_matrix_mode_modelview");
fn void matrixModeProjection() @(cname="sgl_matrix_mode_projection");
fn void matrixModeTexture() @(cname="sgl_matrix_mode_texture");
fn void loadIdentity() @(cname="sgl_load_identity");
fn void loadMatrix(f32* m) @(cname="sgl_load_matrix");
fn void loadTransposeMatrix(f32* m) @(cname="sgl_load_transpose_matrix");
fn void multMatrix(f32* m) @(cname="sgl_mult_matrix");
fn void multTransposeMatrix(f32* m) @(cname="sgl_mult_transpose_matrix");
fn void rotate(f32 angle_rad, f32 x, f32 y, f32 z) @(cname="sgl_rotate");
fn void scale(f32 x, f32 y, f32 z) @(cname="sgl_scale");
fn void translate(f32 x, f32 y, f32 z) @(cname="sgl_translate");
fn void frustum(f32 l, f32 r, f32 b, f32 t, f32 n, f32 f) @(cname="sgl_frustum");
fn void ortho(f32 l, f32 r, f32 b, f32 t, f32 n, f32 f) @(cname="sgl_ortho");
fn void perspective(f32 fov_y, f32 aspect, f32 z_near, f32 z_far) @(cname="sgl_perspective");
fn void lookat(f32 eye_x, f32 eye_y, f32 eye_z, f32 center_x, f32 center_y, f32 center_z, f32 up_x, f32 up_y, f32 up_z) @(cname="sgl_lookat");
fn void pushMatrix() @(cname="sgl_push_matrix");
fn void popMatrix() @(cname="sgl_pop_matrix");
fn void t2f(f32 u, f32 v) @(cname="sgl_t2f");
fn void c3f(f32 r, f32 g, f32 b) @(cname="sgl_c3f");
fn void c4f(f32 r, f32 g, f32 b, f32 a) @(cname="sgl_c4f");
fn void c3b(u8 r, u8 g, u8 b) @(cname="sgl_c3b");
fn void c4b(u8 r, u8 g, u8 b, u8 a) @(cname="sgl_c4b");
fn void c1i(u32 rgba) @(cname="sgl_c1i");
fn void pointSize(f32 s) @(cname="sgl_point_size");
fn void beginPoints() @(cname="sgl_begin_points");
fn void beginLines() @(cname="sgl_begin_lines");
fn void beginLineStrip() @(cname="sgl_begin_line_strip");
fn void beginTriangles() @(cname="sgl_begin_triangles");
fn void beginTriangleStrip() @(cname="sgl_begin_triangle_strip");
fn void beginQuads() @(cname="sgl_begin_quads");
fn void v2f(f32 x, f32 y) @(cname="sgl_v2f");
fn void v3f(f32 x, f32 y, f32 z) @(cname="sgl_v3f");
fn void v2fT2f(f32 x, f32 y, f32 u, f32 v) @(cname="sgl_v2f_t2f");
fn void v3fT2f(f32 x, f32 y, f32 z, f32 u, f32 v) @(cname="sgl_v3f_t2f");
fn void v2fC3f(f32 x, f32 y, f32 r, f32 g, f32 b) @(cname="sgl_v2f_c3f");
fn void v2fC3b(f32 x, f32 y, u8 r, u8 g, u8 b) @(cname="sgl_v2f_c3b");
fn void v2fC4f(f32 x, f32 y, f32 r, f32 g, f32 b, f32 a) @(cname="sgl_v2f_c4f");
fn void v2fC4b(f32 x, f32 y, u8 r, u8 g, u8 b, u8 a) @(cname="sgl_v2f_c4b");
fn void v2fC1i(f32 x, f32 y, u32 rgba) @(cname="sgl_v2f_c1i");
fn void v3fC3f(f32 x, f32 y, f32 z, f32 r, f32 g, f32 b) @(cname="sgl_v3f_c3f");
fn void v3fC3b(f32 x, f32 y, f32 z, u8 r, u8 g, u8 b) @(cname="sgl_v3f_c3b");
fn void v3fC4f(f32 x, f32 y, f32 z, f32 r, f32 g, f32 b, f32 a) @(cname="sgl_v3f_c4f");
fn void v3fC4b(f32 x, f32 y, f32 z, u8 r, u8 g, u8 b, u8 a) @(cname="sgl_v3f_c4b");
fn void v3fC1i(f32 x, f32 y, f32 z, u32 rgba) @(cname="sgl_v3f_c1i");
fn void v2fT2fC3f(f32 x, f32 y, f32 u, f32 v, f32 r, f32 g, f32 b) @(cname="sgl_v2f_t2f_c3f");
fn void v2fT2fC3b(f32 x, f32 y, f32 u, f32 v, u8 r, u8 g, u8 b) @(cname="sgl_v2f_t2f_c3b");
fn void v2fT2fC4f(f32 x, f32 y, f32 u, f32 v, f32 r, f32 g, f32 b, f32 a) @(cname="sgl_v2f_t2f_c4f");
fn void v2fT2fC4b(f32 x, f32 y, f32 u, f32 v, u8 r, u8 g, u8 b, u8 a) @(cname="sgl_v2f_t2f_c4b");
fn void v2fT2fC1i(f32 x, f32 y, f32 u, f32 v, u32 rgba) @(cname="sgl_v2f_t2f_c1i");
fn void v3fT2fC3f(f32 x, f32 y, f32 z, f32 u, f32 v, f32 r, f32 g, f32 b) @(cname="sgl_v3f_t2f_c3f");
fn void v3fT2fC3b(f32 x, f32 y, f32 z, f32 u, f32 v, u8 r, u8 g, u8 b) @(cname="sgl_v3f_t2f_c3b");
fn void v3fT2fC4f(f32 x, f32 y, f32 z, f32 u, f32 v, f32 r, f32 g, f32 b, f32 a) @(cname="sgl_v3f_t2f_c4f");
fn void v3fT2fC4b(f32 x, f32 y, f32 z, f32 u, f32 v, u8 r, u8 g, u8 b, u8 a) @(cname="sgl_v3f_t2f_c4b");
fn void v3fT2fC1i(f32 x, f32 y, f32 z, f32 u, f32 v, u32 rgba) @(cname="sgl_v3f_t2f_c1i");
fn void end() @(cname="sgl_end");

type LogItem enum i32 @(cname="sgl_log_item_t") {
    OK = 0,
    MALLOC_FAILED = 1,
    MAKE_PIPELINE_FAILED = 2,
    PIPELINE_POOL_EXHAUSTED = 3,
    ADD_COMMIT_LISTENER_FAILED = 4,
    CONTEXT_POOL_EXHAUSTED = 5,
    CANNOT_DESTROY_DEFAULT_CONTEXT = 6,
}

type Logger struct @(cname="sgl_logger_t") {
    LogCb func;
    void* user_data;
}

type Pipeline struct @(cname="sgl_pipeline") {
    u32 id;
}

type Context struct @(cname="sgl_context") {
    u32 id;
}

type Error struct @(cname="sgl_error_t") {
    bool any;
    bool vertices_full;
    bool uniforms_full;
    bool commands_full;
    bool stack_overflow;
    bool stack_underflow;
    bool no_context;
}

type ContextDesc struct @(cname="sgl_context_desc_t") {
    i32 max_vertices;
    i32 max_commands;
    PixelFormat color_format;
    PixelFormat depth_format;
    i32 sample_count;
}

type Allocator struct @(cname="sgl_allocator_t") {
    AllocCb alloc_fn;
    FreeCb free_fn;
    void* user_data;
}

type Desc struct @(cname="sgl_desc_t") {
    i32 max_vertices;
    i32 max_commands;
    i32 context_pool_size;
    i32 pipeline_pool_size;
    PixelFormat color_format;
    PixelFormat depth_format;
    i32 sample_count;
    FaceWinding face_winding;
    Allocator allocator;
    Logger logger;
}

type LogCb fn void(const char*, u32, u32, const char*, u32, const char*, void*);
type AllocCb fn void*(usize, void*);
type FreeCb fn void(void*, void*);

