// machine generated, do not edit
module sokol_app;

fn bool isvalid() @(cname="sapp_isvalid");
fn i32 width() @(cname="sapp_width");
fn f32 widthf() @(cname="sapp_widthf");
fn i32 height() @(cname="sapp_height");
fn f32 heightf() @(cname="sapp_heightf");
fn i32 colorFormat() @(cname="sapp_color_format");
fn i32 depthFormat() @(cname="sapp_depth_format");
fn i32 sampleCount() @(cname="sapp_sample_count");
fn bool highDpi() @(cname="sapp_high_dpi");
fn f32 dpiScale() @(cname="sapp_dpi_scale");
fn void showKeyboard(bool show) @(cname="sapp_show_keyboard");
fn bool keyboardShown() @(cname="sapp_keyboard_shown");
fn bool isFullscreen() @(cname="sapp_is_fullscreen");
fn void toggleFullscreen() @(cname="sapp_toggle_fullscreen");
fn void showMouse(bool show) @(cname="sapp_show_mouse");
fn bool mouseShown() @(cname="sapp_mouse_shown");
fn void lockMouse(bool lock) @(cname="sapp_lock_mouse");
fn bool mouseLocked() @(cname="sapp_mouse_locked");
fn void setMouseCursor(MouseCursor cursor) @(cname="sapp_set_mouse_cursor");
fn MouseCursor getMouseCursor() @(cname="sapp_get_mouse_cursor");
fn MouseCursor bindMouseCursorImage(MouseCursor cursor, ImageDesc* desc) @(cname="sapp_bind_mouse_cursor_image");
fn void unbindMouseCursorImage(MouseCursor cursor) @(cname="sapp_unbind_mouse_cursor_image");
fn void* userdata() @(cname="sapp_userdata");
fn Desc queryDesc() @(cname="sapp_query_desc");
fn void requestQuit() @(cname="sapp_request_quit");
fn void cancelQuit() @(cname="sapp_cancel_quit");
fn void quit() @(cname="sapp_quit");
fn void consumeEvent() @(cname="sapp_consume_event");
fn u64 frameCount() @(cname="sapp_frame_count");
fn f64 frameDuration() @(cname="sapp_frame_duration");
fn void setClipboardString(const char* str) @(cname="sapp_set_clipboard_string");
fn const char* getClipboardString() @(cname="sapp_get_clipboard_string");
fn void setWindowTitle(const char* str) @(cname="sapp_set_window_title");
fn void setIcon(IconDesc* icon_desc) @(cname="sapp_set_icon");
fn i32 getNumDroppedFiles() @(cname="sapp_get_num_dropped_files");
fn const char* getDroppedFilePath(i32 index) @(cname="sapp_get_dropped_file_path");
fn void run(Desc* desc) @(cname="sapp_run");
fn void* eglGetDisplay() @(cname="sapp_egl_get_display");
fn void* eglGetContext() @(cname="sapp_egl_get_context");
fn void html5AskLeaveSite(bool ask) @(cname="sapp_html5_ask_leave_site");
fn u32 html5GetDroppedFileSize(i32 index) @(cname="sapp_html5_get_dropped_file_size");
fn void html5FetchDroppedFile(Html5FetchRequest* request) @(cname="sapp_html5_fetch_dropped_file");
fn void* metalGetDevice() @(cname="sapp_metal_get_device");
fn void* metalGetCurrentDrawable() @(cname="sapp_metal_get_current_drawable");
fn void* metalGetDepthStencilTexture() @(cname="sapp_metal_get_depth_stencil_texture");
fn void* metalGetMsaaColorTexture() @(cname="sapp_metal_get_msaa_color_texture");
fn void* macosGetWindow() @(cname="sapp_macos_get_window");
fn void* iosGetWindow() @(cname="sapp_ios_get_window");
fn void* d3d11GetDevice() @(cname="sapp_d3d11_get_device");
fn void* d3d11GetDeviceContext() @(cname="sapp_d3d11_get_device_context");
fn void* d3d11GetSwapChain() @(cname="sapp_d3d11_get_swap_chain");
fn void* d3d11GetRenderView() @(cname="sapp_d3d11_get_render_view");
fn void* d3d11GetResolveView() @(cname="sapp_d3d11_get_resolve_view");
fn void* d3d11GetDepthStencilView() @(cname="sapp_d3d11_get_depth_stencil_view");
fn void* win32GetHwnd() @(cname="sapp_win32_get_hwnd");
fn void* wgpuGetDevice() @(cname="sapp_wgpu_get_device");
fn void* wgpuGetRenderView() @(cname="sapp_wgpu_get_render_view");
fn void* wgpuGetResolveView() @(cname="sapp_wgpu_get_resolve_view");
fn void* wgpuGetDepthStencilView() @(cname="sapp_wgpu_get_depth_stencil_view");
fn u32 glGetFramebuffer() @(cname="sapp_gl_get_framebuffer");
fn i32 glGetMajorVersion() @(cname="sapp_gl_get_major_version");
fn i32 glGetMinorVersion() @(cname="sapp_gl_get_minor_version");
fn bool glIsGles() @(cname="sapp_gl_is_gles");
fn void* x11GetWindow() @(cname="sapp_x11_get_window");
fn void* x11GetDisplay() @(cname="sapp_x11_get_display");
fn void* androidGetNativeActivity() @(cname="sapp_android_get_native_activity");

const usize MAX_TOUCHPOINTS = 8;
const usize MAX_MOUSEBUTTONS = 3;
const usize MAX_KEYCODES = 512;
const usize MAX_ICONIMAGES = 8;

type EventType enum u32 @(cname="sapp_event_type") {
    INVALID = 0,
    KEY_DOWN = 1,
    KEY_UP = 2,
    CHAR = 3,
    MOUSE_DOWN = 4,
    MOUSE_UP = 5,
    MOUSE_SCROLL = 6,
    MOUSE_MOVE = 7,
    MOUSE_ENTER = 8,
    MOUSE_LEAVE = 9,
    TOUCHES_BEGAN = 10,
    TOUCHES_MOVED = 11,
    TOUCHES_ENDED = 12,
    TOUCHES_CANCELLED = 13,
    RESIZED = 14,
    ICONIFIED = 15,
    RESTORED = 16,
    FOCUSED = 17,
    UNFOCUSED = 18,
    SUSPENDED = 19,
    RESUMED = 20,
    QUIT_REQUESTED = 21,
    CLIPBOARD_PASTED = 22,
    FILES_DROPPED = 23,
    NUM = 24,
}

type Keycode enum i32 @(cname="sapp_keycode") {
    INVALID = 0,
    SPACE = 32,
    APOSTROPHE = 39,
    COMMA = 44,
    MINUS = 45,
    PERIOD = 46,
    SLASH = 47,
    NUM_0 = 48,
    NUM_1 = 49,
    NUM_2 = 50,
    NUM_3 = 51,
    NUM_4 = 52,
    NUM_5 = 53,
    NUM_6 = 54,
    NUM_7 = 55,
    NUM_8 = 56,
    NUM_9 = 57,
    SEMICOLON = 59,
    EQUAL = 61,
    A = 65,
    B = 66,
    C = 67,
    D = 68,
    E = 69,
    F = 70,
    G = 71,
    H = 72,
    I = 73,
    J = 74,
    K = 75,
    L = 76,
    M = 77,
    N = 78,
    O = 79,
    P = 80,
    Q = 81,
    R = 82,
    S = 83,
    T = 84,
    U = 85,
    V = 86,
    W = 87,
    X = 88,
    Y = 89,
    Z = 90,
    LEFT_BRACKET = 91,
    BACKSLASH = 92,
    RIGHT_BRACKET = 93,
    GRAVE_ACCENT = 96,
    WORLD_1 = 161,
    WORLD_2 = 162,
    ESCAPE = 256,
    ENTER = 257,
    TAB = 258,
    BACKSPACE = 259,
    INSERT = 260,
    DELETE = 261,
    RIGHT = 262,
    LEFT = 263,
    DOWN = 264,
    UP = 265,
    PAGE_UP = 266,
    PAGE_DOWN = 267,
    HOME = 268,
    END = 269,
    CAPS_LOCK = 280,
    SCROLL_LOCK = 281,
    NUM_LOCK = 282,
    PRINT_SCREEN = 283,
    PAUSE = 284,
    F1 = 290,
    F2 = 291,
    F3 = 292,
    F4 = 293,
    F5 = 294,
    F6 = 295,
    F7 = 296,
    F8 = 297,
    F9 = 298,
    F10 = 299,
    F11 = 300,
    F12 = 301,
    F13 = 302,
    F14 = 303,
    F15 = 304,
    F16 = 305,
    F17 = 306,
    F18 = 307,
    F19 = 308,
    F20 = 309,
    F21 = 310,
    F22 = 311,
    F23 = 312,
    F24 = 313,
    F25 = 314,
    KP_0 = 320,
    KP_1 = 321,
    KP_2 = 322,
    KP_3 = 323,
    KP_4 = 324,
    KP_5 = 325,
    KP_6 = 326,
    KP_7 = 327,
    KP_8 = 328,
    KP_9 = 329,
    KP_DECIMAL = 330,
    KP_DIVIDE = 331,
    KP_MULTIPLY = 332,
    KP_SUBTRACT = 333,
    KP_ADD = 334,
    KP_ENTER = 335,
    KP_EQUAL = 336,
    LEFT_SHIFT = 340,
    LEFT_CONTROL = 341,
    LEFT_ALT = 342,
    LEFT_SUPER = 343,
    RIGHT_SHIFT = 344,
    RIGHT_CONTROL = 345,
    RIGHT_ALT = 346,
    RIGHT_SUPER = 347,
    MENU = 348,
}

type AndroidTooltype enum i32 @(cname="sapp_android_tooltype") {
    UNKNOWN = 0,
    FINGER = 1,
    STYLUS = 2,
    MOUSE = 3,
}

type Touchpoint struct @(cname="sapp_touchpoint") {
    u32* identifier;
    f32 pos_x;
    f32 pos_y;
    AndroidTooltype android_tooltype;
    bool changed;
}

type Mousebutton enum i32 @(cname="sapp_mousebutton") {
    LEFT = 0,
    RIGHT = 1,
    MIDDLE = 2,
    INVALID = 256,
}

const u32 MODIFIER_SHIFT = 1;
const u32 MODIFIER_CTRL = 2;
const u32 MODIFIER_ALT = 4;
const u32 MODIFIER_SUPER = 8;
const u32 MODIFIER_LMB = 256;
const u32 MODIFIER_RMB = 512;
const u32 MODIFIER_MMB = 1024;

type Event struct @(cname="sapp_event") {
    u64 frame_count;
    EventType type_;
    Keycode key_code;
    u32 char_code;
    bool key_repeat;
    u32 modifiers;
    Mousebutton mouse_button;
    f32 mouse_x;
    f32 mouse_y;
    f32 mouse_dx;
    f32 mouse_dy;
    f32 scroll_x;
    f32 scroll_y;
    i32 num_touches;
    Touchpoint[8] touches;
    i32 window_width;
    i32 window_height;
    i32 framebuffer_width;
    i32 framebuffer_height;
}

type Range struct @(cname="sapp_range") {
    void* ptr;
    usize size;
}

type ImageDesc struct @(cname="sapp_image_desc") {
    i32 width;
    i32 height;
    i32 cursor_hotspot_x;
    i32 cursor_hotspot_y;
    Range pixels;
}

type IconDesc struct @(cname="sapp_icon_desc") {
    bool sokol_default;
    ImageDesc[8] images;
}

type Allocator struct @(cname="sapp_allocator") {
    AllocCb alloc_fn;
    FreeCb free_fn;
    void* user_data;
}

type LogItem enum i32 @(cname="sapp_log_item") {
    OK = 0,
    MALLOC_FAILED = 1,
    MACOS_INVALID_NSOPENGL_PROFILE = 2,
    WIN32_LOAD_OPENGL32_DLL_FAILED = 3,
    WIN32_CREATE_HELPER_WINDOW_FAILED = 4,
    WIN32_HELPER_WINDOW_GETDC_FAILED = 5,
    WIN32_DUMMY_CONTEXT_SET_PIXELFORMAT_FAILED = 6,
    WIN32_CREATE_DUMMY_CONTEXT_FAILED = 7,
    WIN32_DUMMY_CONTEXT_MAKE_CURRENT_FAILED = 8,
    WIN32_GET_PIXELFORMAT_ATTRIB_FAILED = 9,
    WIN32_WGL_FIND_PIXELFORMAT_FAILED = 10,
    WIN32_WGL_DESCRIBE_PIXELFORMAT_FAILED = 11,
    WIN32_WGL_SET_PIXELFORMAT_FAILED = 12,
    WIN32_WGL_ARB_CREATE_CONTEXT_REQUIRED = 13,
    WIN32_WGL_ARB_CREATE_CONTEXT_PROFILE_REQUIRED = 14,
    WIN32_WGL_OPENGL_VERSION_NOT_SUPPORTED = 15,
    WIN32_WGL_OPENGL_PROFILE_NOT_SUPPORTED = 16,
    WIN32_WGL_INCOMPATIBLE_DEVICE_CONTEXT = 17,
    WIN32_WGL_CREATE_CONTEXT_ATTRIBS_FAILED_OTHER = 18,
    WIN32_D3D11_CREATE_DEVICE_AND_SWAPCHAIN_WITH_DEBUG_FAILED = 19,
    WIN32_D3D11_GET_IDXGIFACTORY_FAILED = 20,
    WIN32_D3D11_GET_IDXGIADAPTER_FAILED = 21,
    WIN32_D3D11_QUERY_INTERFACE_IDXGIDEVICE1_FAILED = 22,
    WIN32_REGISTER_RAW_INPUT_DEVICES_FAILED_MOUSE_LOCK = 23,
    WIN32_REGISTER_RAW_INPUT_DEVICES_FAILED_MOUSE_UNLOCK = 24,
    WIN32_GET_RAW_INPUT_DATA_FAILED = 25,
    WIN32_DESTROYICON_FOR_CURSOR_FAILED = 26,
    LINUX_GLX_LOAD_LIBGL_FAILED = 27,
    LINUX_GLX_LOAD_ENTRY_POINTS_FAILED = 28,
    LINUX_GLX_EXTENSION_NOT_FOUND = 29,
    LINUX_GLX_QUERY_VERSION_FAILED = 30,
    LINUX_GLX_VERSION_TOO_LOW = 31,
    LINUX_GLX_NO_GLXFBCONFIGS = 32,
    LINUX_GLX_NO_SUITABLE_GLXFBCONFIG = 33,
    LINUX_GLX_GET_VISUAL_FROM_FBCONFIG_FAILED = 34,
    LINUX_GLX_REQUIRED_EXTENSIONS_MISSING = 35,
    LINUX_GLX_CREATE_CONTEXT_FAILED = 36,
    LINUX_GLX_CREATE_WINDOW_FAILED = 37,
    LINUX_X11_CREATE_WINDOW_FAILED = 38,
    LINUX_EGL_BIND_OPENGL_API_FAILED = 39,
    LINUX_EGL_BIND_OPENGL_ES_API_FAILED = 40,
    LINUX_EGL_GET_DISPLAY_FAILED = 41,
    LINUX_EGL_INITIALIZE_FAILED = 42,
    LINUX_EGL_NO_CONFIGS = 43,
    LINUX_EGL_NO_NATIVE_VISUAL = 44,
    LINUX_EGL_GET_VISUAL_INFO_FAILED = 45,
    LINUX_EGL_CREATE_WINDOW_SURFACE_FAILED = 46,
    LINUX_EGL_CREATE_CONTEXT_FAILED = 47,
    LINUX_EGL_MAKE_CURRENT_FAILED = 48,
    LINUX_X11_OPEN_DISPLAY_FAILED = 49,
    LINUX_X11_QUERY_SYSTEM_DPI_FAILED = 50,
    LINUX_X11_DROPPED_FILE_URI_WRONG_SCHEME = 51,
    LINUX_X11_FAILED_TO_BECOME_OWNER_OF_CLIPBOARD = 52,
    ANDROID_UNSUPPORTED_INPUT_EVENT_INPUT_CB = 53,
    ANDROID_UNSUPPORTED_INPUT_EVENT_MAIN_CB = 54,
    ANDROID_READ_MSG_FAILED = 55,
    ANDROID_WRITE_MSG_FAILED = 56,
    ANDROID_MSG_CREATE = 57,
    ANDROID_MSG_RESUME = 58,
    ANDROID_MSG_PAUSE = 59,
    ANDROID_MSG_FOCUS = 60,
    ANDROID_MSG_NO_FOCUS = 61,
    ANDROID_MSG_SET_NATIVE_WINDOW = 62,
    ANDROID_MSG_SET_INPUT_QUEUE = 63,
    ANDROID_MSG_DESTROY = 64,
    ANDROID_UNKNOWN_MSG = 65,
    ANDROID_LOOP_THREAD_STARTED = 66,
    ANDROID_LOOP_THREAD_DONE = 67,
    ANDROID_NATIVE_ACTIVITY_ONSTART = 68,
    ANDROID_NATIVE_ACTIVITY_ONRESUME = 69,
    ANDROID_NATIVE_ACTIVITY_ONSAVEINSTANCESTATE = 70,
    ANDROID_NATIVE_ACTIVITY_ONWINDOWFOCUSCHANGED = 71,
    ANDROID_NATIVE_ACTIVITY_ONPAUSE = 72,
    ANDROID_NATIVE_ACTIVITY_ONSTOP = 73,
    ANDROID_NATIVE_ACTIVITY_ONNATIVEWINDOWCREATED = 74,
    ANDROID_NATIVE_ACTIVITY_ONNATIVEWINDOWDESTROYED = 75,
    ANDROID_NATIVE_ACTIVITY_ONINPUTQUEUECREATED = 76,
    ANDROID_NATIVE_ACTIVITY_ONINPUTQUEUEDESTROYED = 77,
    ANDROID_NATIVE_ACTIVITY_ONCONFIGURATIONCHANGED = 78,
    ANDROID_NATIVE_ACTIVITY_ONLOWMEMORY = 79,
    ANDROID_NATIVE_ACTIVITY_ONDESTROY = 80,
    ANDROID_NATIVE_ACTIVITY_DONE = 81,
    ANDROID_NATIVE_ACTIVITY_ONCREATE = 82,
    ANDROID_CREATE_THREAD_PIPE_FAILED = 83,
    ANDROID_NATIVE_ACTIVITY_CREATE_SUCCESS = 84,
    WGPU_DEVICE_LOST = 85,
    WGPU_DEVICE_LOG = 86,
    WGPU_DEVICE_UNCAPTURED_ERROR = 87,
    WGPU_SWAPCHAIN_CREATE_SURFACE_FAILED = 88,
    WGPU_SWAPCHAIN_SURFACE_GET_CAPABILITIES_FAILED = 89,
    WGPU_SWAPCHAIN_CREATE_DEPTH_STENCIL_TEXTURE_FAILED = 90,
    WGPU_SWAPCHAIN_CREATE_DEPTH_STENCIL_VIEW_FAILED = 91,
    WGPU_SWAPCHAIN_CREATE_MSAA_TEXTURE_FAILED = 92,
    WGPU_SWAPCHAIN_CREATE_MSAA_VIEW_FAILED = 93,
    WGPU_SWAPCHAIN_GETCURRENTTEXTURE_FAILED = 94,
    WGPU_REQUEST_DEVICE_STATUS_ERROR = 95,
    WGPU_REQUEST_DEVICE_STATUS_UNKNOWN = 96,
    WGPU_REQUEST_ADAPTER_STATUS_UNAVAILABLE = 97,
    WGPU_REQUEST_ADAPTER_STATUS_ERROR = 98,
    WGPU_REQUEST_ADAPTER_STATUS_UNKNOWN = 99,
    WGPU_CREATE_INSTANCE_FAILED = 100,
    IMAGE_DATA_SIZE_MISMATCH = 101,
    DROPPED_FILE_PATH_TOO_LONG = 102,
    CLIPBOARD_STRING_TOO_BIG = 103,
}

type Logger struct @(cname="sapp_logger") {
    LogCb func;
    void* user_data;
}

type Desc struct @(cname="sapp_desc") {
    Cb init_cb;
    Cb frame_cb;
    Cb cleanup_cb;
    EventCb event_cb;
    void* user_data;
    DataCb init_userdata_cb;
    DataCb frame_userdata_cb;
    DataCb cleanup_userdata_cb;
    EventDataCb event_userdata_cb;
    i32 width;
    i32 height;
    i32 sample_count;
    i32 swap_interval;
    bool high_dpi;
    bool fullscreen;
    bool alpha;
    const char* window_title;
    bool enable_clipboard;
    i32 clipboard_size;
    bool enable_dragndrop;
    i32 max_dropped_files;
    i32 max_dropped_file_path_length;
    IconDesc icon;
    Allocator allocator;
    Logger logger;
    i32 gl_major_version;
    i32 gl_minor_version;
    bool win32_console_utf8;
    bool win32_console_create;
    bool win32_console_attach;
    const char* html5_canvas_selector;
    bool html5_canvas_resize;
    bool html5_preserve_drawing_buffer;
    bool html5_premultiplied_alpha;
    bool html5_ask_leave_site;
    bool html5_update_document_title;
    bool html5_bubble_mouse_events;
    bool html5_bubble_touch_events;
    bool html5_bubble_wheel_events;
    bool html5_bubble_key_events;
    bool html5_bubble_char_events;
    bool html5_use_emsc_set_main_loop;
    bool html5_emsc_set_main_loop_simulate_infinite_loop;
    bool ios_keyboard_resizes_canvas;
}

type Html5FetchError enum i32 @(cname="sapp_html5_fetch_error") {
    FETCH_ERROR_NO_ERROR = 0,
    FETCH_ERROR_BUFFER_TOO_SMALL = 1,
    FETCH_ERROR_OTHER = 2,
}

type Html5FetchResponse struct @(cname="sapp_html5_fetch_response") {
    bool succeeded;
    Html5FetchError error_code;
    i32 file_index;
    Range data;
    Range buffer;
    void* user_data;
}

type Html5FetchRequest struct @(cname="sapp_html5_fetch_request") {
    i32 dropped_file_index;
    ResponseCb callback;
    Range buffer;
    void* user_data;
}

type MouseCursor enum i32 @(cname="sapp_mouse_cursor") {
    DEFAULT = 0,
    ARROW = 1,
    IBEAM = 2,
    CROSSHAIR = 3,
    POINTING_HAND = 4,
    RESIZE_EW = 5,
    RESIZE_NS = 6,
    RESIZE_NWSE = 7,
    RESIZE_NESW = 8,
    RESIZE_ALL = 9,
    NOT_ALLOWED = 10,
    CUSTOM_0 = 11,
    CUSTOM_1 = 12,
    CUSTOM_2 = 13,
    CUSTOM_3 = 14,
    CUSTOM_4 = 15,
    CUSTOM_5 = 16,
    CUSTOM_6 = 17,
    CUSTOM_7 = 18,
    CUSTOM_8 = 19,
    CUSTOM_9 = 20,
    CUSTOM_10 = 21,
    CUSTOM_11 = 22,
    CUSTOM_12 = 23,
    CUSTOM_13 = 24,
    CUSTOM_14 = 25,
    CUSTOM_15 = 26,
    NUM = 27,
}

type AllocCb fn void*(usize, void*);
type FreeCb fn void(void*, void*);
type LogCb fn void(const char*, u32, u32, const char*, u32, const char*, void*);
type Cb fn void();
type EventCb fn void(Event*);
type DataCb fn void(void*);
type EventDataCb fn void(Event*, void*);
type ResponseCb fn void(Html5FetchResponse*);

